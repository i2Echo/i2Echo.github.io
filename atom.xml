<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kujohn&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kujohnln.com/"/>
  <updated>2018-03-16T11:45:34.333Z</updated>
  <id>https://kujohnln.com/</id>
  
  <author>
    <name>Kujohn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于地图编辑器自动拼接算法的深入浅出</title>
    <link href="https://kujohnln.com/2017/12/23/Auto-tiling-algorithm/"/>
    <id>https://kujohnln.com/2017/12/23/Auto-tiling-algorithm/</id>
    <published>2017-12-23T17:17:00.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>接触过RMXP的想必都知道有一个叫autotile的东西吧，或许你也跟我一样会觉得RPG地图编辑器里面的这种自动拼接的tile真的很神奇（不同状态下tile的表现形式是不一样的）；之前传统的瓦片式地图之间没有过渡效果，看起来比较粗糙，但是有了种autotile的出现，方块式的游戏地图也能不那么单调了，刚好最近需要使用这种autotile的功能，搜索了下却没找到什么比较详细的资料，经过一番探究以及一个小伙伴的启发，总算实现了这个autotile的效果。<br><a id="more"></a></p><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>用RMXP画几下就知道，一个autotile周围出现不同数量，或者位置关系不同的同种autotile时，每一块tile的表现形式是会变化的；一开始我看了许久，也没找出什么规律或者说一时没办法想到怎么取描述这些变化并用程序表现出来，然后我试着将素材划分成32*32的块，对比变化，看起来好多了，都知道哪里变化了，然后试着用canvas画了下，然而感觉好麻烦，半天没弄出来，有点气馁；然后就先丢一边不管了~~，后面看到一个小伙伴的解法（今天我要讲的解法与他的差别蛮大，主要思路是不同的），我才恍然大悟。</p><h3 id="图源分析对比"><a href="#图源分析对比" class="headerlink" title="图源分析对比"></a>图源分析对比</h3><p>一般autotile素材是提供了一张96*128素材嘛，我用Photoshop将他划分成48块16*16的小块，<br><img src="/images/upload/splitAutotile.png" alt="划分autotile"><br>然后对比变化，发现变化的地方都发生在每块tile相邻的16*16的块中，因为本来autotile就是依据与他相邻位置autotile的情况而变化的，也就是说只有相邻的接壤处会发生变化，示意图如下，我把将要放置的块用红色表示，与红色块相邻的位置块为蓝色，与红色块接壤处的块标记为黄色（只是用来表示下位置关系，与该素材无关）：<br><img src="/images/upload/showPosition.png" alt="位置关系示意图"><br>经对比可发现每次变化的地方必出现在黄色块区域，所以只需要分析黄色区域的变化情况有多少种就可以了，受到小伙伴的启发（它是将autotile块的拼接情况分好，就是比如四个方向都不需要与其他autotile拼接这块的四个方向就设为0，某一方向需要与其他块拼接就置为1，这样预置画图[32*32]，遍历整个地图再将预置图画上去,那种方法很好，但是我并不满意这种处理方法），然后我可以将需要变化的地方置为1，不需要变化的置为0（以该示例图来说，你会发现是草的地方不会变化，水的地方是变化的）。</p><h3 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h3><p>得到以上分析之后，我们来分析每个黄色块（即接壤处的块）的变化情况，前面已经说了，每个变化的最小单位是16*16的小图片中，那么将黄色块分成4个16*16的小块，那么所有变化情况很显然为2^4种（即16种），这时候我们将变化的小块置为1，不变化的小块置为0，则可得到16种情况；然后依次将16种情况套到被分割成48小块的原素材中，如果以索引数组表示这16种情况我们可得到以下结果：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 0代表不变化的小块，1代表变化的小块（或者这里直观地说，草代表0，水代表1）</span>  <span class="token comment" spellcheck="true">// 0 | 0</span>  <span class="token comment" spellcheck="true">//---+--- //0000  [10, 9, 4, 3]</span>  <span class="token comment" spellcheck="true">// 0 | 0</span>  <span class="token comment" spellcheck="true">// 0 | 0</span>  <span class="token comment" spellcheck="true">//---+--- //0001  [10, 9, 4, 13]</span>  <span class="token comment" spellcheck="true">// 0 | 1</span>  <span class="token comment" spellcheck="true">//依次类推。。。得到总共16种情况</span><span class="token keyword">var</span> indexArrs <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">//16种组合的图块索引数组; // 将autotile分割成48块16*16的小块; 数组索引即对应各个小块</span>  <span class="token comment" spellcheck="true">//                                       +----+----+----+----+----+----+</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//0   bin:0000      | 1  | 2  | 3  | 4  | 5  | 6  |</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//1   bin:0001      +----+----+----+----+----+----+</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//2   bin:0010      | 7  | 8  | 9  | 10 | 11 | 12 |</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//3   bin:0011      +----+----+----+----+----+----+</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//4   bin:0100      | 13 | 14 | 15 | 16 | 17 | 18 |</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//5   bin:0101      +----+----+----+----+----+----+</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//6   bin:0110      | 19 | 20 | 21 | 22 | 23 | 24 |</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//7   bin:0111      +----+----+----+----+----+----+</span>    <span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//8   bin:1000      | 25 | 26 | 27 | 28 | 29 | 30 |</span>    <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//9   bin:1001      +----+----+----+----+----+----+</span>    <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//10  bin:1010      | 31 | 32 | 33 | 34 | 35 | 36 |</span>    <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//11  bin:1011      +----+----+----+----+----+----+</span>    <span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//12  bin:1100      | 37 | 38 | 39 | 40 | 41 | 42 |</span>    <span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//13  bin:1101      +----+----+----+----+----+----+</span>    <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//14  bin:1110      | 43 | 44 | 45 | 46 | 47 | 48 |</span>    <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">//15  bin:1111      +----+----+----+----+----+----+</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后对应16种变化区域组合的图块如下：<br><img src="/images/upload/blocks.png" alt="组合块"></p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>好了，有了以上基础，就可以用程序实现下这个autotile的画图了，这里使用html5的canvas实现。<br>大致步骤如下：</p><ul><li>遍历一个地图数组，如果该位置为autotile，则进行位置关系分析</li><li>位置关系的分析主要过程是，遍历周围8个块（32*32）如果是一致的autotile材料则置该位置id为1，不是则置为0，然后将这个1或0分配到四个格子里（当然，当前块是autotile分配到四个块里也都是1）示意图如下：</li><li>然后取由四个小块组成黄色框的块的四个值依次从上到下从左到右顺序组成四位二进制数（0~15），然后们依据这四位二进制数即可找到前面对应的数组的索引。</li><li>因为我们是需要遍历整个地图，所以只需要画当前块就行了，到这里其实我们已经找到当前块的四个小块对应原素材的图片索引了（也就是红色区域分别取4个黄色区域的四个角，四个黄色的数组前面已经找到了，所以分别取这四个位置的对应数组的值就行了）</li><li>最后得到所有autotile对应的数组索引就可以画图了</li></ul><p>其实这里你可能会说碰到边界怎么办，其实这里不需要考虑边界，因为画的时候只画当前块，周围只是用来判断关系的，你大可将边界视为一般普通的块，最后画图并不会到边界外所以不会报错。<br><img src="/images/upload/binImg.png" alt="二进制关系示意图"></p><h3 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h3><p>经过以上过程，我写了一个demo，并用它画了不同素材的autotile之后，发现四个外角与边其实有点不搭（可能因为边角是固定搭配吧，但是这种解法是体现不出一个边角的固定搭配的，因为都是反应块与块之间的接壤关系，而不管块内部的搭配关系），所以我觉得应该修正一下，我用一张数字的素材进行了修正，非常推荐，很好用，如图：<br><img src="/images/upload/autotile15.png" alt="数字索引autotile"><br>我最终的修正关系是：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//修正四个边角的固定搭配</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>blockIndexs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//左上外角为13，邻边小块为16和31时需要修正,下面类似</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>blockIndexs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span> blockIndexs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>blockIndexs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">31</span><span class="token punctuation">)</span> blockIndexs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>blockIndexs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>blockIndexs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">)</span> blockIndexs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>blockIndexs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">36</span><span class="token punctuation">)</span> blockIndexs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>blockIndexs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>blockIndexs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">25</span><span class="token punctuation">)</span> blockIndexs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>blockIndexs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">46</span><span class="token punctuation">)</span> blockIndexs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>blockIndexs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>blockIndexs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">30</span><span class="token punctuation">)</span> blockIndexs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>blockIndexs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">45</span><span class="token punctuation">)</span> blockIndexs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">47</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个修正的地方就是边界之外应该也视为autotile并且是通用autotile，那样画图看起来好看多了。</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>反正最后效果还是不错的，不多说，直接上图：<br><img src="/images/upload/result-at.png" alt="效果图"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>到此，就是关于本次autotile算法的一个分享了，如果还有疑问，这里给出我<a href="https://github.com/i2Echo/autotileDemo" target="_blank" rel="noopener">github的源码</a>，以及效果展示<a href="http://ghpages.kujohnln.com/autotileDemo/" target="_blank" rel="noopener">demo</a>，感兴趣的你可以参考一下~~</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://blog.csdn.net/blizmax6/article/details/6736783" target="_blank" rel="noopener">魔兽争霸3- Terrain , 自动拼接地形渲染方式</a></li><li><a href="http://blog.csdn.net/gouki04/article/details/7107088" target="_blank" rel="noopener">浅谈RPG Maker XP自动地图元件的绘制原理</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h2&gt;&lt;p&gt;接触过RMXP的想必都知道有一个叫autotile的东西吧，或许你也跟我一样会觉得RPG地图编辑器里面的这种自动拼接的tile真的很神奇（不同状态下tile的表现形式是不一样的）；之前传统的瓦片式地图之间没有过渡效果，看起来比较粗糙，但是有了种autotile的出现，方块式的游戏地图也能不那么单调了，刚好最近需要使用这种autotile的功能，搜索了下却没找到什么比较详细的资料，经过一番探究以及一个小伙伴的启发，总算实现了这个autotile的效果。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://kujohnln.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="auto-tiling" scheme="https://kujohnln.com/tags/auto-tiling/"/>
    
      <category term="地图编辑器" scheme="https://kujohnln.com/tags/%E5%9C%B0%E5%9B%BE%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="RPG" scheme="https://kujohnln.com/tags/RPG/"/>
    
      <category term="算法" scheme="https://kujohnln.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器上配置node+mongodb服务</title>
    <link href="https://kujohnln.com/2017/11/18/Run-node-server-on-linux/"/>
    <id>https://kujohnln.com/2017/11/18/Run-node-server-on-linux/</id>
    <published>2017-11-18T12:22:23.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>准备把一些小项目放到服务器上测试，由于是node+mongodb的项目，未有过部署经验，现记录配置过程。我的服务器系统是centos6 64位，以下均默认在该环境下操作。<br><a id="more"></a></p><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p>关于node的安装配置，前面已经写过一篇了<a href="https://ikuyman.pub/2017/07/21/centos-install-nodejs/" target="_blank" rel="noopener">linux下安装nodejs</a></p><h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><h3 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h3><pre class="line-numbers language-bash"><code class="language-bash">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.10.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf mongodb-linux-x86_64-3.4.10.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="放到你要运行的位置"><a href="#放到你要运行的位置" class="headerlink" title="放到你要运行的位置"></a>放到你要运行的位置</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p mongodb<span class="token function">cp</span> -R -n mongodb-linux-x86_64-3.4.10/ mongodb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="将mongodb二进制路径添加到PATH"><a href="#将mongodb二进制路径添加到PATH" class="headerlink" title="将mongodb二进制路径添加到PATH"></a>将mongodb二进制路径添加到PATH</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 不添加path的话你需要进到mongodb的bin目录才能运行相关命令，不方便</span><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token operator">&lt;</span>mongodb-install-directory<span class="token operator">></span>/bin:<span class="token variable">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>记得这里的\&lt;mongodb-install-directory>替换成你安装的路径</p><h2 id="运行mongodb"><a href="#运行mongodb" class="headerlink" title="运行mongodb"></a>运行mongodb</h2><h3 id="创建db数据存放文件夹"><a href="#创建db数据存放文件夹" class="headerlink" title="创建db数据存放文件夹"></a>创建db数据存放文件夹</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mongodb 服务的数据文件夹默认在/data/db下，如果设在别的文件路径，后面启动时需要带路径参数</span><span class="token function">mkdir</span> -p /data/db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="启动mongodb服务"><a href="#启动mongodb服务" class="headerlink" title="启动mongodb服务"></a>启动mongodb服务</h3><pre class="line-numbers language-bash"><code class="language-bash">mongod<span class="token comment" spellcheck="true"># 如果数据存放路径不是默认的需要加路径参数</span>mongod --dbpath <span class="token operator">&lt;</span>path to data directory<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用mongodb"><a href="#使用mongodb" class="headerlink" title="使用mongodb"></a>使用mongodb</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入mongo，需要先启动mongodb服务</span>mongo<span class="token comment" spellcheck="true"># 显示你使用的数据库</span>db<span class="token comment" spellcheck="true"># 选择或新建要使用的数据库</span>use <span class="token operator">&lt;</span>database<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面就可以进行一些增删改查之类的操作了，具体就不多描述，可以去查看官方文档。</p><h2 id="为node应用配置nginx服务"><a href="#为node应用配置nginx服务" class="headerlink" title="为node应用配置nginx服务"></a>为node应用配置nginx服务</h2><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><p>由于我的服务器上已经有别的project在运行，我需要用nginx将node服务代理到80端口，这样只要我配置不同的域名，即可实现不同域名访问同服务器的不同应用。下面是配置文件：<br>node_project.conf</p><pre class="line-numbers language-bash"><code class="language-bash">server <span class="token punctuation">{</span>  listen      80<span class="token punctuation">;</span>  server_name youromain<span class="token punctuation">;</span>  location  / <span class="token punctuation">{</span>      proxy_pass http://127.0.0.1:3000<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#我的node服务时放在默认的3000端口，你可以改成自己的端口</span>      proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>      proxy_set_header X-Real-Ip <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>      proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>      proxy_redirect off<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到nginx的代理配置很简单但是很强大。</p><h3 id="重启nginx服务"><a href="#重启nginx服务" class="headerlink" title="重启nginx服务"></a>重启nginx服务</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到输出ok就表示配置启动成功。</p><h2 id="运行node项目"><a href="#运行node项目" class="headerlink" title="运行node项目"></a>运行node项目</h2><h3 id="从github拉取项目"><a href="#从github拉取项目" class="headerlink" title="从github拉取项目"></a>从github拉取项目</h3><p>我一般项目都放github上，要用的时候直接clone到服务器上去，当然服务器也要先装git</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># clone项目</span><span class="token function">git</span> clone your-porject-git-address<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="在服务器上运行应用"><a href="#在服务器上运行应用" class="headerlink" title="在服务器上运行应用"></a>在服务器上运行应用</h3><p>因为都是做好的项目，直接运行就OK了，当然mongodb与node应用之间的配置别忘了设置好。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> yourprojetname<span class="token comment" spellcheck="true"># 安装依赖</span><span class="token function">npm</span> <span class="token function">install</span><span class="token comment" spellcheck="true"># 启动</span>node app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>到这里，你已经可以访问你的node项目了，对了，别忘了将域名解析到对应的服务器。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://docs.mongodb.com" target="_blank" rel="noopener">mongodb官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h2&gt;&lt;p&gt;准备把一些小项目放到服务器上测试，由于是node+mongodb的项目，未有过部署经验，现记录配置过程。我的服务器系统是centos6 64位，以下均默认在该环境下操作。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://kujohnln.com/categories/Linux/"/>
    
    
      <category term="mongoDB" scheme="https://kujohnln.com/tags/mongoDB/"/>
    
      <category term="linux" scheme="https://kujohnln.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Excel数据处理之VBA初尝试</title>
    <link href="https://kujohnln.com/2017/10/13/data-processed/"/>
    <id>https://kujohnln.com/2017/10/13/data-processed/</id>
    <published>2017-10-13T10:04:02.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>要说学东西最快的方式是什么，那问题驱动法必是其中最有效的方式之一了；最近有同学需要帮忙处理一个Excel数据表格，闲着没事就帮忙试一下。数据特征为按时间记录的多列数据（具体什么数据就不描述了），但是由于某些原因中间有一些数据缺失，主要体现为某天或者某几天的数据缺失了；数据处理要求为把缺失的数据按照一定规则补上。</p><a id="more"></a><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>数据表体现为时间跨度长，数据量特别大，首先排除手动解决的方案；依据数据特征，解决的关键是如何找到并补上缺失的数据项，当然就是根据时间了，但是有一个难点在于时间序列不同于数字系列，时间序列规律不是单一的，比如每月的天数有28,29,30,31；然后某月末过来是下月的1号，还有跨年的也要考虑，好像是很有规律，但是并不容易解决。本来以为用Python应该很容易解决了，但是一时间想不到用什么好的办法去处理时间这个点，不借助已有的库处理起来比较麻烦，还得转换时间格式；要是能有一个函数能得出两个时间点之差那就很好办了。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>因为数据表时间格式是Dec 11,2017；想到excel可以将时间格式任意转换，继而联想到应该有时间处理相关的函数，google搜了下，确实有想要的时间处理函数，经过了解，于是决定用VBA(Visual Basic Application)解决这个问题，这种语言主要是微软为Microsoft Office提供的应用程序，很方便的调用各种接口来处理Microsoft Office文件。这种优点就不多说了，就这里可以编程处理这个excel，还提供了各种便捷的接口，那岂不是可以为所欲为了。嗖，花了点时间看了下VBA的文档，由于以前学过一点VB，学起来还是蛮快的；好的还是回到前面的问题，一开始我在找微软的excel内置函数里确实找到一个可以得到两个时间点之差的函数，然后用vba调用相关接口函数即可，但是进一步了解到这个时间函数存在兼容性问题，接口参数对于本问题也不太友好，遂找了下vba本身的时间函数，DateDiff完美适用，然后得到时间差之后用DateAdd(真的是想什么来什么，一看文档就有这个函数，加上前面的DateDiff完美契合本问题)补上缺失的时间，再根据规则补上确实的数据，完美；等一下，好像还有一点小问题，时间顺序需要在注意分情况，样通用性就更好一点，最后来看完整代码，核心代码不超过10行：</p><pre class="line-numbers language-basic"><code class="language-basic"><span class="token keyword">Sub</span> fixdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">Dim</span> sheet <span class="token keyword">As</span> Worksheet<span class="token function">Set</span> sheet <span class="token operator">=</span> Worksheets<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">Const</span> startRow <span class="token keyword">As</span> <span class="token keyword">Integer</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">Dim</span> sortByTimeAscending <span class="token keyword">As</span> BooleansortByTimeAscending <span class="token operator">=</span> True<span class="token keyword">Dim</span> endRow<span class="token punctuation">,</span> endCol <span class="token keyword">As</span> <span class="token keyword">Long</span><span class="token keyword">Dim</span> prevDate<span class="token punctuation">,</span> nextDate <span class="token keyword">As</span> <span class="token function">Date</span><span class="token keyword">Dim</span> temp<span class="token punctuation">,</span> i<span class="token punctuation">,</span> jendRow <span class="token operator">=</span> sheet.Cells<span class="token punctuation">(</span>Rows.Count<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>.<span class="token keyword">End</span><span class="token punctuation">(</span>xlUp<span class="token punctuation">)</span>.RowendCol <span class="token operator">=</span> sheet.Cells<span class="token punctuation">(</span>startRow<span class="token punctuation">,</span> Columns.Count<span class="token punctuation">)</span>.<span class="token keyword">End</span><span class="token punctuation">(</span>xlToLeft<span class="token punctuation">)</span>.Column<span class="token keyword">Dim</span> flag <span class="token keyword">As</span> <span class="token keyword">Long</span>flag <span class="token operator">=</span> DateDiff<span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> sheet.Cells<span class="token punctuation">(</span>startRow<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>.Value<span class="token punctuation">,</span> sheet.Cells<span class="token punctuation">(</span>startRow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>.Value<span class="token punctuation">)</span><span class="token keyword">If</span> flag <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">Then</span>    sortByTimeAscending <span class="token operator">=</span> False<span class="token keyword">End</span> <span class="token keyword">If</span><span class="token keyword">For</span> i <span class="token operator">=</span> endRow <span class="token keyword">To</span> <span class="token punctuation">(</span>startRow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">Step</span> <span class="token number">-1</span>    prevDate <span class="token operator">=</span> sheet.Cells<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>.Value    nextDate <span class="token operator">=</span> sheet.Cells<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>.Value    temp <span class="token operator">=</span> <span class="token function">Abs</span><span class="token punctuation">(</span>DateDiff<span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> prevDate<span class="token punctuation">,</span> nextDate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">If</span> temp <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">Then</span>        <span class="token keyword">Dim</span> days        <span class="token keyword">For</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">To</span> temp            dataPrev <span class="token operator">=</span> sheet.Cells<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>.Value            sheet.Cells<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>.EntireRow.Insert            <span class="token keyword">If</span> sortByTimeAscending <span class="token keyword">Then</span>                days <span class="token operator">=</span> <span class="token operator">-</span>j            <span class="token keyword">Else</span>                days <span class="token operator">=</span> j            <span class="token keyword">End</span> <span class="token keyword">If</span>            sheet.Cells<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> DateAdd<span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> days<span class="token punctuation">,</span> nextDate<span class="token punctuation">)</span>            <span class="token keyword">Dim</span> col            <span class="token keyword">For</span> col <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">To</span> endCol                sheet.Cells<span class="token punctuation">(</span>i<span class="token punctuation">,</span> col<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sheet.Cells<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span>.Value <span class="token operator">+</span> sheet.Cells<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span>.Value<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>            <span class="token keyword">Next</span> col        <span class="token keyword">Next</span> j    <span class="token keyword">End</span> <span class="token keyword">If</span><span class="token keyword">Next</span> i<span class="token keyword">End</span> <span class="token keyword">Sub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在excel运行以上代码，等待几秒后数据就全部处理好了，完美！有时候帮别人做点东西可能自己也会有不少的收获呢，我以后遇到类似问题就可以用vba解决了，然后如果很多表格或者重复的劳动也可以用代码交给机器去做了，又快又好岂不乐哉。关于vba如何在excel里面使用，随便搜索下就知道了，还有一些API文档在参考文献中会给出，你也试试吧。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://msdn.microsoft.com/en-us/vba/vba-excel" target="_blank" rel="noopener">MSDN</a></li><li><a href="http://www.yiibai.com/vba/" target="_blank" rel="noopener">VBA教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;要说学东西最快的方式是什么，那问题驱动法必是其中最有效的方式之一了；最近有同学需要帮忙处理一个Excel数据表格，闲着没事就帮忙试一下。数据特征为按时间记录的多列数据（具体什么数据就不描述了），但是由于某些原因中间有一些数据缺失，主要体现为某天或者某几天的数据缺失了；数据处理要求为把缺失的数据按照一定规则补上。&lt;/p&gt;
    
    </summary>
    
      <category term="Excel" scheme="https://kujohnln.com/categories/Excel/"/>
    
    
      <category term="Excel" scheme="https://kujohnln.com/tags/Excel/"/>
    
      <category term="数据处理" scheme="https://kujohnln.com/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="VBA" scheme="https://kujohnln.com/tags/VBA/"/>
    
  </entry>
  
  <entry>
    <title>前端工程化思考之CSS的管理组织方式</title>
    <link href="https://kujohnln.com/2017/09/09/css-orgarnize/"/>
    <id>https://kujohnln.com/2017/09/09/css-orgarnize/</id>
    <published>2017-09-09T15:35:33.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>对于前端而言，css作为基础之一，大概觉得熟悉的样式规则语法就OK了，就觉得这很简单嘛，但是用久了经常会有一些思考，就是怎么写好css，写了之后需要修改怎么去维护管理，因为一般修改需求后需要重写，很麻烦，现在也有一些css的预处理器，像sass，scss，less，stylus等等的，确实提高不少写css的效率以及便利性。<a id="more"></a>但是这只是一方面的问题，并没有从根本上涉及到css的管理与维护，那么怎么更好的维护或者说管理CSS？到网上一查其实已经有很多优秀的设计方案，有的我们在平时可能多多少少用到了，但是并没有特别去提取抽象并很好的表达出来。</p><h3 id="OOCSS"><a href="#OOCSS" class="headerlink" title="OOCSS"></a>OOCSS</h3><p>OOCSS(object-oriented CSS)即面向对象css，该方案核心思想主要包含两点：</p><ul><li>Separation of structure and design</li><li>Separation of container and content<br><img src="/images/upload/oocss.png" alt="oocss"><br>使用这种结构，我们可以在不同的地方使用一些通用类；当然这种方式也是各有优劣：</li><li>优：总体上会减少代码量（DRY原则）</li><li>劣：增加代码复杂程度，因为当你想修改特定元素的样式时，你可能不仅需要修改css样式（因为大部分类是公用的，不能随意修改），而且修改之后还需要添加到该元素标签，修改起来还是有点麻烦的，特别是项目代码很多的时候。</li></ul><p>当然这种方式还没有形成正式的一个标准，完全可以按照自己的需求自定义一套规则，所以这也给不同开发人员更替维护时候增加一定难度。</p><h3 id="SMACSS"><a href="#SMACSS" class="headerlink" title="SMACSS"></a>SMACSS</h3><p><img src="/images/upload/smacss.png" alt="smacss"><br>SMACSS是指可扩展化模块化css，主要目的是为了减少代码量以及代码结构简化；它的核心就是通过分类CSS规则，通过分类能过更好的组织样式，主要分为以下5个类别：<br>1 Base rules：定义所有基础元素的样式，像标签选择器，伪类选择器，自选择器等等这些元素，注意这里不包括ID选择器以及类选择器，最常见的就是我们css reset的用法。<br>2 Layout rules：定义一些全局元素的的样式，比如header、footer、sidebar等等这些基本上只出现一次的元素，而且主要是整体布局类的元素，像这种一般直接用ID选择器会比较清晰<br>3 Module rules：主要适用可以在一个页面上重用的块，使用时一般为类选择器，避免使用ID选择器以类选择器，尽量解耦，使其独立于上下文。<br>4 State rules：这里主要是定义一些需要改变状态或场合的情况，比如一个菜单的展开合并，消息的失败成功等等，注意只有这里是可以使用关键字”!important”的。<br>5 Theme rules：用于改变页面的主题风格，不是很常用，只有需要经常改变主题风格或者供用户选择主题风格时就可以用到。</p><h3 id="AtomicCSS"><a href="#AtomicCSS" class="headerlink" title="AtomicCSS"></a>AtomicCSS</h3><p><img src="/images/upload/AtomicCSS.webp" alt="AtomicCSS"><br>AtomicCSS是为每个可重用的属性创建一个独立的最小化的类，这种方式是很方便修改样式的并且不易破坏其他样式，更改为模块也比较容易，这种方式以前还是用的比较多的，在一些css框架也比较常见，但是他也有一些比较大的缺点的：</p><ul><li>Class都是些属性名，没有什么描述的语义性，很容易随着开发变得越来越复杂化。</li><li>显示样式直接体现在了HTML中了<br>这种方式用在小型项目中就会很冗余，毕竟重用性不高，大型项目倒是还比较适合，有利于降低代码量，还因为他的直接性可以用在一些框架项目的样式矫正。</li></ul><h3 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h3><p><img src="/images/upload/BEM.png" alt="BEM"><br>BEM(Block,Element,Modifier)是一种基于组件的开发方式，其核心思想就是将页面分离成独立的块，每一块独立于上下文不会相互影响，方便项目中组件间复用以及快速扩展而原有的可以不受影响。个人还是比较喜欢这种组织方式，可读性以及复用性不要太爽。像现在流行的一些前端框架react，vue都是基于组件的开发方式。下面介绍下一些基本概念：</p><ul><li>Block：功能上独立的他页面组件，可以重复使用，一般用类名表示，注意类名应该具有一定的描述语义性，避免使用外观等不是功能上的描述。</li><li>Element： 一个不能单独使用的复合块，比如表单元素的form和其input</li><li>Modiffier: 定义块或元素的外观状态或行为的实体；</li><li>Mix：单个DOM节点上使用不同BEM实体</li><li>File structure：将BEM的分离思想应用于文件结构</li></ul><h3 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS in JS"></a>CSS in JS</h3><p>未完待续。。。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://en.bem.info/methodology/quick-start/" target="_blank" rel="noopener">BEM</a></li><li><a href="https://css-tricks.com/methods-organize-css/" target="_blank" rel="noopener">Methods to Organize CSS</a></li><li><a href="https://m.alphasights.com/css-evolution-from-css-sass-bem-css-modules-to- styled-components-d4c1da3a659b" target="_blank" rel="noopener">CSS Evolution</a></li><li><a href="https://smacss.com/" target="_blank" rel="noopener">SMACSS</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;对于前端而言，css作为基础之一，大概觉得熟悉的样式规则语法就OK了，就觉得这很简单嘛，但是用久了经常会有一些思考，就是怎么写好css，写了之后需要修改怎么去维护管理，因为一般修改需求后需要重写，很麻烦，现在也有一些css的预处理器，像sass，scss，less，stylus等等的，确实提高不少写css的效率以及便利性。
    
    </summary>
    
      <category term="CSS" scheme="https://kujohnln.com/categories/CSS/"/>
    
    
      <category term="css" scheme="https://kujohnln.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Centos下安装nodejs并升级到最新稳定版</title>
    <link href="https://kujohnln.com/2017/07/21/centos-install-nodejs/"/>
    <id>https://kujohnln.com/2017/07/21/centos-install-nodejs/</id>
    <published>2017-07-21T22:59:18.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本文主要记录下在centos6上安装nodejs并实现node版本管理的过程。<br><a id="more"></a></p><h2 id="一、使用源码安装"><a href="#一、使用源码安装" class="headerlink" title="一、使用源码安装"></a>一、使用源码安装</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><pre class="line-numbers language-bash"><code class="language-bash">yum -y <span class="token function">install</span> gcc <span class="token function">make</span> gcc-c++ openssl-devel <span class="token function">wget</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载源码并解压"><a href="#下载源码并解压" class="headerlink" title="下载源码并解压"></a>下载源码并解压</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> http://nodejs.org/dist/v6.4.4/node-v6.4.4.tar.gz<span class="token comment" spellcheck="true"># 此处版本号可以更换你想安装的</span><span class="token function">tar</span> -zvxf node-v6.4.4.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="编译-amp-安装"><a href="#编译-amp-安装" class="headerlink" title="编译&amp;安装"></a>编译&amp;安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 注意使用node权限</span><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="验证安装成功"><a href="#验证安装成功" class="headerlink" title="验证安装成功"></a>验证安装成功</h3><pre class="line-numbers language-bash"><code class="language-bash">node -v<span class="token comment" spellcheck="true"># 显示版本号即安装成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、使用yum安装"><a href="#二、使用yum安装" class="headerlink" title="二、使用yum安装"></a>二、使用yum安装</h2><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> -y nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><pre class="line-numbers language-bash"><code class="language-bash">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装node版本管理工具n"><a href="#安装node版本管理工具n" class="headerlink" title="安装node版本管理工具n"></a>安装node版本管理工具n</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="升级node为最新稳定版"><a href="#升级node为最新稳定版" class="headerlink" title="升级node为最新稳定版"></a>升级node为最新稳定版</h3><pre class="line-numbers language-bash"><code class="language-bash">n stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看是否升级成功"><a href="#查看是否升级成功" class="headerlink" title="查看是否升级成功"></a>查看是否升级成功</h3><pre class="line-numbers language-bash"><code class="language-bash">node -v<span class="token comment" spellcheck="true"># 显示最新版本号v8.2.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就OK了，可以愉快的撸node了</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://www.cnblogs.com/hamy/p/3632574.html" target="_blank" rel="noopener">Centos 安装 NodeJS</a></li><li><a href="http://weizhifeng.net/node-version-management-via-n-and-nvm.html" target="_blank" rel="noopener">利用n和nvm管理Node的版本</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;本文主要记录下在centos6上安装nodejs并实现node版本管理的过程。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://kujohnln.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://kujohnln.com/tags/linux/"/>
    
      <category term="centos" scheme="https://kujohnln.com/tags/centos/"/>
    
      <category term="nodejs" scheme="https://kujohnln.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>有序数组转化为二叉搜索树</title>
    <link href="https://kujohnln.com/2017/07/11/sorted-array-to-bst/"/>
    <id>https://kujohnln.com/2017/07/11/sorted-array-to-bst/</id>
    <published>2017-07-11T23:40:46.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>所谓温故而知新，就算不能知新，加深记忆也是极好的；这不，最近偶然在网上看到一道要求将一个有序数组转化为二叉树的算法题，就试着用js(ES6)实现一下。<br><a id="more"></a></p><h2 id="算法实现（采用ES6）"><a href="#算法实现（采用ES6）" class="headerlink" title="算法实现（采用ES6）"></a>算法实现（采用ES6）</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 节点类 */</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * //递归 * @param {*Array} arr * @param {*Number} start * @param {*Number} end */</span><span class="token keyword">let</span> creatBST <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> start <span class="token operator">></span> end <span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">)</span>  <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token punctuation">)</span>  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">creatBST</span><span class="token punctuation">(</span> arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token number">-1</span> <span class="token punctuation">)</span>  root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">creatBST</span><span class="token punctuation">(</span> arr<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end <span class="token punctuation">)</span>  <span class="token keyword">return</span> root<span class="token punctuation">}</span><span class="token keyword">let</span> sortedArr2BST <span class="token operator">=</span> arr <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> arr <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token keyword">return</span> <span class="token function">creatBST</span><span class="token punctuation">(</span> arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * * @param {*Obeject(Node)} root */</span><span class="token keyword">let</span> printTree <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> root <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> root <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printTree</span><span class="token punctuation">(</span> root<span class="token punctuation">.</span>left <span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> root<span class="token punctuation">.</span>data <span class="token punctuation">)</span>    <span class="token function">printTree</span><span class="token punctuation">(</span> root<span class="token punctuation">.</span>right <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// test</span><span class="token comment" spellcheck="true">// const arr = []</span><span class="token comment" spellcheck="true">// const arr0 = [1, 2, 3, 4, 5]</span><span class="token comment" spellcheck="true">// const arr1 = [1, 2, 3, 4, 5, 6]</span><span class="token comment" spellcheck="true">// let tree0 = sortedArr2BST( arr )</span><span class="token comment" spellcheck="true">// let tree1 = sortedArr2BST( arr1 )</span><span class="token comment" spellcheck="true">// printTree( tree0 )</span><span class="token comment" spellcheck="true">// printTree( tree1 )</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h2&gt;&lt;p&gt;所谓温故而知新，就算不能知新，加深记忆也是极好的；这不，最近偶然在网上看到一道要求将一个有序数组转化为二叉树的算法题，就试着用js(ES6)实现一下。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://kujohnln.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法， 二叉树， 递归" scheme="https://kujohnln.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C-%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8C-%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>关于配置ssh公钥免密登录VPS过程及遇到的坑</title>
    <link href="https://kujohnln.com/2017/05/07/ssh/"/>
    <id>https://kujohnln.com/2017/05/07/ssh/</id>
    <published>2017-05-07T00:54:28.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<p>最近入手了一个vps，那ss肯定是要装的，但是仅仅装个ss未免太浪费资源，首先想到的是把博客弄上去，然后就可以申请并配置ssl证书使博客加上绿色的小锁锁，即采用https加密访问。然后在服务器搭建远程git仓库过程中，配置ssh公钥免密登录是却一直出现验证失败，还是需要密码；一顿Google之后找到了原因并最终解决，因此记录下来，方便可能遇到此错误的童鞋。<a id="more"></a></p><h2 id="本地操作（win10）"><a href="#本地操作（win10）" class="headerlink" title="本地操作（win10）"></a>本地操作（win10）</h2><p>请确保已经安装git，不会的网上资料一大把，安装之后会有一个gitbash（window系统），使用下面命令生成公钥和密钥</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 现在本地注册一个用户如果未注册过</span><span class="token function">git</span> config --global user.email <span class="token string">"email@example.com"</span> <span class="token comment" spellcheck="true">#这里换成你的邮箱</span><span class="token function">git</span> config --global user.name <span class="token string">"username"</span> <span class="token comment" spellcheck="true">#username换成一个你喜欢的用户名最好用英文避免以后可能出现的不必要的麻烦</span><span class="token comment" spellcheck="true"># 生成公钥和密钥</span>ssh-keygen -t rsa -C <span class="token string">"email@example.com"</span> <span class="token comment" spellcheck="true">#这里同上替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后找到你生成的位置，后面要用到生成的公钥id_rsa.pub，一般会在C:\Users\&lt;用户名&gt;.ssh文件夹下。</p><h2 id="vps-centos6"><a href="#vps-centos6" class="headerlink" title="vps(centos6)"></a>vps(centos6)</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><pre class="line-numbers language-bash"><code class="language-bash">yum update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> upgrade -yyum <span class="token function">install</span> git-core<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="新增git用户（管理git仓库）"><a href="#新增git用户（管理git仓库）" class="headerlink" title="新增git用户（管理git仓库）"></a>新增git用户（管理git仓库）</h3><pre class="line-numbers language-bash"><code class="language-bash">adduser <span class="token function">git</span><span class="token comment" spellcheck="true">#修改权限</span><span class="token function">chmod</span> 740 /etc/sudoers<span class="token function">vi</span> /etc/sudoers<span class="token comment" spellcheck="true"># 找到以下内容</span><span class="token comment" spellcheck="true">## Allow root to run any commands anywhere</span>root    ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span class="token comment" spellcheck="true"># 增加一行</span><span class="token function">git</span>   ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span class="token comment" spellcheck="true"># 退出保存并改回权限</span><span class="token function">chmod</span> 440 /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建远程仓库，并配置ssh免密登录"><a href="#新建远程仓库，并配置ssh免密登录" class="headerlink" title="新建远程仓库，并配置ssh免密登录"></a>新建远程仓库，并配置ssh免密登录</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">su</span> <span class="token function">git</span><span class="token function">cd</span> ~<span class="token function">mkdir</span> .ssh <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> .ssh<span class="token function">touch</span> authorized_keys<span class="token function">vi</span> authorized_keys//在这个文件中粘贴进刚刚申请的key（id_rsa.pub文件中）<span class="token function">cd</span> ~ <span class="token function">mkdir</span> hexo.git <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> hexo.git<span class="token function">git</span> init --bare <span class="token comment" spellcheck="true"># 创建裸仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="远程免密登录"><a href="#远程免密登录" class="headerlink" title="远程免密登录"></a>远程免密登录</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在gitbash中输入</span><span class="token function">ssh</span> git@VPS的IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果登录成功表示配置成功,但是我弄了半天还是要求你输入密码，经过一番查找，找到了原因，就是文件权限配置有要求。<br>根据文档，还需要配置服务器上的文件权限</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> 700 ~/.ssh<span class="token function">chmod</span> 600 ~/.ssh/authorized_keys <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上表示只有该文件所有者才能拥有读写或执行的权限<br>设置完成之后连接成功，不需要密码登陆了<br><img src="\images\upload\ssh-no-password.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://tiktoking.github.io/2016/01/26/hexo/" target="_blank" rel="noopener">在VPS上搭建hexo博客，利用git更新</a></p><p><a href="https://wiki.centos.org/HowTos/Network/SecuringSSH" target="_blank" rel="noopener">Securing OpenSSH</a></p><p><a href="https://bandwagonhost.com/aff.php?aff=15290" target="_blank" rel="noopener">搬瓦工vps</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近入手了一个vps，那ss肯定是要装的，但是仅仅装个ss未免太浪费资源，首先想到的是把博客弄上去，然后就可以申请并配置ssl证书使博客加上绿色的小锁锁，即采用https加密访问。然后在服务器搭建远程git仓库过程中，配置ssh公钥免密登录是却一直出现验证失败，还是需要密码；一顿Google之后找到了原因并最终解决，因此记录下来，方便可能遇到此错误的童鞋。
    
    </summary>
    
      <category term="Linux" scheme="https://kujohnln.com/categories/Linux/"/>
    
    
      <category term="ssh vps linux" scheme="https://kujohnln.com/tags/ssh-vps-linux/"/>
    
  </entry>
  
  <entry>
    <title>sass中变量作用域的历史遗留问题</title>
    <link href="https://kujohnln.com/2017/04/16/variable-scope-in-sass/"/>
    <id>https://kujohnln.com/2017/04/16/variable-scope-in-sass/</id>
    <published>2017-04-16T15:58:23.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>坑就是用来填的，最近练手的一个vue项目，采用vue-cli脚手架快速生成项目框架，项目css部分采用sass预编译，但其间碰到一个有关sass变量作用域的，以前一直没注意到的问题；所以打算写下来，方便其他童鞋不踩到这个坑。<br><a id="more"></a></p><h2 id="sass简介"><a href="#sass简介" class="headerlink" title="sass简介"></a>sass简介</h2><h3 id="什么是sass"><a href="#什么是sass" class="headerlink" title="什么是sass"></a>什么是sass</h3><p>SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</p><h3 id="sass有两种后缀名文件："><a href="#sass有两种后缀名文件：" class="headerlink" title="sass有两种后缀名文件："></a>sass有两种后缀名文件：</h3><ul><li>一种后缀名为sass，写选择器时不能使用大括号和分号</li><li>一种后缀名为scss，使用大括号和分号</li></ul><pre class="line-numbers language-sass"><code class="language-sass"><span class="token comment" spellcheck="true">//后缀名为sass的语法，不能出现大括号和分号</span><span class="token variable-line"><span class="token variable">$highlight-color</span><span class="token punctuation">:</span> #abcdef</span><span class="token number">.</span><span class="token selector">selected</span><span class="token property-line">  <span class="token property">border</span><span class="token punctuation">:</span> 1px <span class="token variable">$highlight-color</span> solid</span><span class="token comment" spellcheck="true">//后缀名为scss的语法，跟css一样，需要大括号和分号</span><span class="token variable-line"><span class="token variable">$highlight-color</span><span class="token punctuation">:</span> #abcdef;</span><span class="token number">.</span><span class="token selector">selected{</span><span class="token property-line">  <span class="token property">border</span><span class="token punctuation">:</span><span class="token property">1px</span> solid <span class="token variable">$highlight-color</span>;</span><span class="token selector">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sass变量"><a href="#sass变量" class="headerlink" title="sass变量"></a>sass变量</h2><p>Sass的一个重要特性就是它为CSS引入了变量。你可以把反复使用的CSS属性值定义成变量，然后通过变量名来引用它们，而无需重复书写这一属性值。或者，对于仅使用过一次的属性值，你可以赋予其一个易懂的变量名，让人一眼就知道这个属性值的用途。<br>Sass使用“$”来标识变量，比如: $color, $width</p><h3 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h3><h4 id="问题的由来"><a href="#问题的由来" class="headerlink" title="问题的由来"></a>问题的由来</h4><p>因为项目需要适配移动端，采用@media query媒体查询来处理，其中有一段css需要复用，所以采用sass的@mixin混合宏；但是在不同设备中是需要不同的宽高之类的变量值，因为用到的值多又不确定，所以不打算用传参的形式，就直接使用局部变量覆盖全局变量，然而我并没有得到预期的结果，一番排查之后，发现是局部变量不起作用；问题具体如下：<br><img src="/images/upload/sass.png" alt="sass"><br>我预期的是div&gt;a&gt;p使用局部变量$color的值即blue，但实际上是red，那为什么不是预期的值呢，下面就说说sass全局变量和局部变量的作用域。</p><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><p>可以看到，我用的在线编译器的sass版本是3.4.21，我项目下用的sass编译器也是3.4以上的，但是在3.4版本以前，即比较3.3版本，在变量作用域这一块发生了改变，但是我却没有注意到。我们知道sass变量支持两种作用域，即全局变量和局部变量：</p><ul><li>全局变量：默认情况下，所有定义在任何选择器之外的变量被认为是全局变量。这就意味着他们可以在样式表中任意地方被访问。</li><li>局部变量：定义在选择器之内的变量称之为局部变量</li></ul><p>依照以前看的教程，变量作用域就一句话“sass没有全局变量”，因为全局变量在局部被重新声明的时候，局部变量会覆盖全局变量的值，即相当于重新声明了一个全局变量，后面再使用该变量是得到的值则是重新声明的值；但是在3.4版本的sass中已经不一样了，同名局部变量只会覆盖当前作用域下的变量值，其他作用域仍旧使用的是全局变量的值；回到上面的问题，为什么会出现预期不一样的结果，因为我的思路是基于3.3版本的sass的变量作用域，即后面再次调用mixin时将使用新的变量值；然而因为现在所使用的编译器是3.3版本以后的，所以就会出现这个与自己想法有出路的结果，那么除了说用传参解决，还有更好的办法吗，当然有。</p><h4 id="global标志"><a href="#global标志" class="headerlink" title="global标志"></a>global标志</h4><p>新版本的sass中引入了一个global标志，可以让局部变量作用于全局范围，使用如下：<br><img src="/images/upload/sass2.png" alt="sass"><br>这样得到的就是预期的结果了，感觉这个用法在使用媒体查询的时候特别有用，只要在局部重新定义一些变量值，就可以很方便的使用@mixin来复用样式块。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本篇文章介绍了sass作用域的一个变动，以及巧用global标志来复用mixin的样式块。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要：&quot;&gt;&lt;a href=&quot;#摘要：&quot; class=&quot;headerlink&quot; title=&quot;摘要：&quot;&gt;&lt;/a&gt;摘要：&lt;/h2&gt;&lt;p&gt;坑就是用来填的，最近练手的一个vue项目，采用vue-cli脚手架快速生成项目框架，项目css部分采用sass预编译，但其间碰到一个有关sass变量作用域的，以前一直没注意到的问题；所以打算写下来，方便其他童鞋不踩到这个坑。&lt;br&gt;
    
    </summary>
    
      <category term="Sass" scheme="https://kujohnln.com/categories/Sass/"/>
    
    
      <category term="sass" scheme="https://kujohnln.com/tags/sass/"/>
    
      <category term="scss" scheme="https://kujohnln.com/tags/scss/"/>
    
  </entry>
  
  <entry>
    <title>基于markdown的一个微信公众号编辑器</title>
    <link href="https://kujohnln.com/2017/01/08/wechat-markdown-editor/"/>
    <id>https://kujohnln.com/2017/01/08/wechat-markdown-editor/</id>
    <published>2017-01-08T20:58:17.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<p>当你觉得某个东西用的不顺手，而你又很需要，怎么办呢，不用想，当然是自己做一个呗。最近一个朋友跟我抱怨编辑微信公众号的文章好费劲，排版超费时间；我平时一般用markdown编辑文章，排版虽然简单，但可以节约很多时间，排版也清晰明了；于是乎，就决定动手做一个用于微信公众号的markdown语法的编辑器；在github找了个开源的markdown的编辑器，根据需求改造了一下，用起来还蛮顺手，写好了一键复制到微信公众号编辑器后台即可。<br><a id="more"></a><br>并且做了移动端的适配：</p><ul><li>pc端shortcut:<br><img src="/images/upload/editor-pc.png" alt="editor-pc"></li><li>手机端shortcut:<br><img src="/images/upload/editor-mb.png" alt="editor-mb"></li></ul><h3 id="在线测试地址：Demo"><a href="#在线测试地址：Demo" class="headerlink" title="在线测试地址：Demo"></a>在线测试地址：<a href="http://ghpages.kujohnln.com/md4wxpub/" target="_blank" rel="noopener">Demo</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当你觉得某个东西用的不顺手，而你又很需要，怎么办呢，不用想，当然是自己做一个呗。最近一个朋友跟我抱怨编辑微信公众号的文章好费劲，排版超费时间；我平时一般用markdown编辑文章，排版虽然简单，但可以节约很多时间，排版也清晰明了；于是乎，就决定动手做一个用于微信公众号的markdown语法的编辑器；在github找了个开源的markdown的编辑器，根据需求改造了一下，用起来还蛮顺手，写好了一键复制到微信公众号编辑器后台即可。&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="https://kujohnln.com/categories/Tools/"/>
    
    
      <category term="editor" scheme="https://kujohnln.com/tags/editor/"/>
    
      <category term="markdown" scheme="https://kujohnln.com/tags/markdown/"/>
    
      <category term="wechat" scheme="https://kujohnln.com/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>从函数到函数表达式（FE）的深入理解（JavaScript）</title>
    <link href="https://kujohnln.com/2017/01/02/IIFE/"/>
    <id>https://kujohnln.com/2017/01/02/IIFE/</id>
    <published>2017-01-02T01:10:04.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要针对自己学习过程中对ECMAScript对象-函数的一些模糊理解的地方或者一些高级用法采用笔记的方式写下来，方便进一步理解以及复习。<br><a id="more"></a></p><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>ECMAScript中主要包含三类函数，每一类都有各自的特性。</p><h3 id="函数声明（Function-Declaration）"><a href="#函数声明（Function-Declaration）" class="headerlink" title="函数声明（Function Declaration）"></a>函数声明（Function Declaration）</h3><h4 id="特性（Features）"><a href="#特性（Features）" class="headerlink" title="特性（Features）"></a>特性（Features）</h4><ul><li>有函数名</li><li>代码位置在：要么在程序级别或者直接在另外一个函数的函数体（FunctionBody）中</li><li>在进入上下文时创建出来的</li><li>会影响变量对象</li><li>形式如下：<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><strong>Tips</strong><blockquote><p>这类函数的主要特性是：只有它们可以影响变量对象（存储在上下文的VO中）;此特性同时也引出了非常重要的一点（变量对象的天生特性导致的） —— 它们在执行代码阶段就已经存在了（因为FD在进入上下文阶段就收集到了VO中）.</p></blockquote></li></ul><h3 id="函数表达式（Function-Expression）"><a href="#函数表达式（Function-Expression）" class="headerlink" title="函数表达式（Function Expression）"></a>函数表达式（Function Expression）</h3><h4 id="特性（Features）-1"><a href="#特性（Features）-1" class="headerlink" title="特性（Features）"></a>特性（Features）</h4><ul><li>代码位置必须要在表达式的位置</li><li>名字可有可无（无名的我们就叫匿名函数）</li><li>不会影响变量对象</li><li>在执行代码阶段创建出来</li><li>最简单常见的就是赋值表达式<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通过变量foo就可以使用函数了</span><span class="token comment" spellcheck="true">// 注意：函数声明式也会出现变量提升的问题，但是函数表达式不会出现,所以这里不能先调用，必须声明在前。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>当然函数表达式也可以有名字<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">_foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在内部使用时（如递归调用）也可以直接使用_foo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="FE的一些使用"><a href="#FE的一些使用" class="headerlink" title="FE的一些使用"></a>FE的一些使用</h4></li><li>定义中可以看到这类函数出现的位置是表达式，那就可以通过这个区分一般的函数声明了：<br><code>`</code> javascript<br>// 在括号中(grouping operator)只可能是表达式<br>(function foo() {});</li></ul><p>// 在数组初始化中 —— 同样也只能是表达式<br>[function bar() {}];</p><p>// 逗号操作符也只能跟表达式<br>1, function func() {};</p><pre><code>* 定义中也说到FE是在代码执行阶段创建所以未执行前使用时是未定义的：``` javascript// 不论是在定义前还是定义后，FE都是无法访问的// (因为它是在代码执行阶段创建出来的),console.log(foo); // &quot;foo&quot; is not defined(function foo() {});// 后面也没用，因为它根本就不在变量对象中console.log(foo);  // &quot;foo&quot; is not defined</code></pre><p>那么要怎么去调用呢？无论你定义一个函数像这样function foo(){}或者var foo = function(){}，调用时，你都需要在后面加上一对圆括号，像这样foo()或者直接在表达式后面加上括号也是可以的，但是要注意的是只能在函数表达式后面加括号，如果是函数声明会报错的，那怎么区别呢，前面说到通过出现的位置去判断是否能使用括号。当然还有一种情况，“当圆括号包裹函数时，它会默认将函数作为表达式去解析，而不是函数声明。”，例如：(function(){/<em> code </em>/}());这样使用是不会报错的，这里的匿名函数是当成函数表达式解析的。</p><h4 id="立即执行函数表达式（Immediately-Invoked-Function-Expression）"><a href="#立即执行函数表达式（Immediately-Invoked-Function-Expression）" class="headerlink" title="立即执行函数表达式（Immediately-Invoked Function Expression）"></a>立即执行函数表达式（Immediately-Invoked Function Expression）</h4><p>上面说到通过括号执行函数表达式，那么就像这样(function foo() {})();看到这个是不是很熟悉，没错，这就是我们常用的立即执行函数表达式，在一些前端库开头经常会看到这种用法。</p><ul><li>IIFE的一些形式<br><code>`</code> javascript<br>//下面是个自执行函数，递归的调用自己本身</li></ul><p>function foo(){foo();};</p><p>//这是一个自执行匿名函数。因为它没有标识符，它必须是使用<code>arguments.callee</code>属性来调用它自己</p><p>var foo = function(){arguments.callee();};</p><p>//这也许算是一个自执行匿名函数，但是仅仅当<code>foo</code>标识符作为它的引用时，如果你将它换成用<code>foo</code>来调用同样可行</p><p>var foo = function(){foo();};</p><p>//有些人像这样叫’self-executing anonymous function’下面的函数,即使它不是自执行的，因为它并没有调用它自己。然后，它只是被立即调用了而已。</p><p>(function(){ /<em>code</em>/ }());</p><p>//为函数表达式增加标识符(也就是说创造一个命名函数)对我们的调试会有很大帮助。一旦命名，函数将不再匿名。</p><p>(function foo(){/<em> code </em>/}());</p><p>//IIFEs同样也可以自执行，尽管，也许他不是最有用的模式</p><p>(function(){arguments.callee();}())<br>(function foo(){foo();}())</p><pre><code>* IIFE的闭包特性IIFE会保存闭包的状态，就像函数通过他们的名字被调用时，参数会被传递，而当函数表达式被立即调用时，参数也会被传递。一个立即调用的函数表达式可以用来锁定值并且有效的保存此时的状态，因为任何定义在一个函数内的函数都可以使用外面函数传递进来的参数和变量(这种关系被叫做闭包)；一个常见的获取当前点击元素的索引值的例子：``` javascript/**   它的运行结果并不像你想的那样，因为`i`的值从来没有被锁定。  事实上，每个链接，当被点击时（循环已经执行完毕），因此会弹出所有元素的总数，  因为这是 `i` 此时的真实值。*/var elems = document.getElementsByTagName(&#39;a&#39;);for(var i = 0;i &lt; elems.length; i++ ) {    elems[i].addEventListener(&#39;click&#39;,function(e){        e.preventDefault();        alert(&#39;I am link #&#39; + i)    },false);}/**  而像下面这样改写，便可以了，因为在IIFE里，`i`值被锁定在了`lockedInIndex`里。  在循环结束执行时，尽管`i`值的数值是所有元素的总和，但每一次函数表达式被调用时，  IIFE 里的 `lockedInIndex` 值都是`i`传给它的值,所以当链接被点击时，正确的值被弹出。*/var elems = document.getElementsByTagName(&#39;a&#39;);for(var i = 0;i &lt; elems.length;i++) {    (function(lockedInIndex){        elems[i].addEventListener(&#39;click&#39;,function(e){            e.preventDefault();            alert(&#39;I am link #&#39; + locked InIndex);            },false)    })(i);}/**  你同样可以像下面这样使用IIFE，仅仅只用括号包括点击处理函数，并不包含整个`addEventListener`。  无论用哪种方式，这两个例子都可以用IIFE将值锁定，不过我发现前面一个例子更可读*/var elems = document.getElementsByTagName( &#39;a&#39; );for ( var i = 0; i &lt; elems.length; i++ ) {    elems[ i ].addEventListener( &#39;click&#39;, (function( lockedInIndex ){        return function(e){            e.preventDefault();            alert( &#39;I am link #&#39; + lockedInIndex );        };        })( i ),false);    }</code></pre><h4 id="函数表达式的模块模式"><a href="#函数表达式的模块模式" class="headerlink" title="函数表达式的模块模式"></a>函数表达式的模块模式</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>        i <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    increment<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>counter<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>counter<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模块模式方法的好处显而易见，简洁明了，非常少的代码；你可以有效的利用与方法和属性相关的命名，在一个对象里，组织全部的模块代码即最小化了全局变量的污染也创造了使用变量，在一些js库中也很常见。</p><h3 id="Function构造器声明的函数"><a href="#Function构造器声明的函数" class="headerlink" title="Function构造器声明的函数"></a>Function构造器声明的函数</h3><h4 id="特性（Features）-2"><a href="#特性（Features）-2" class="headerlink" title="特性（Features）"></a>特性（Features）</h4><ul><li>Function 构造函数 创建一个新的Function对象。</li><li>在 JavaScript 中, 每个函数实际上都是一个Function对象。</li><li>使用Function构造器生成的Function对象是在函数创建时解析的。</li><li><strong>注意:</strong> 使用Function构造器生成的函数，并不会在创建它们的上下文中创建闭包；它们一般在全局作用域中被创建。当运行这些函数的时候，它们只能访问自己的本地变量和全局变量，不能访问Function构造器被调用生成的上下文的作用域</li><li>形式如下：<br><code>`</code> javascript<br>// 创建了一个能返回两个参数和的函数<br>const adder = new Function(“a”, “b”, “return a + b”);</li></ul><p>adder(1, 2); //3<br><code>`</code><br>因为这里不是主要去讲函数的构造器就不做过多详细说明。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank" rel="noopener">Immediately-Invoked Function Expression (IIFE)</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener">Function - JavaScript | MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要针对自己学习过程中对ECMAScript对象-函数的一些模糊理解的地方或者一些高级用法采用笔记的方式写下来，方便进一步理解以及复习。&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://kujohnln.com/categories/Javascript/"/>
    
    
      <category term="js" scheme="https://kujohnln.com/tags/js/"/>
    
      <category term="IIFE" scheme="https://kujohnln.com/tags/IIFE/"/>
    
      <category term="函数" scheme="https://kujohnln.com/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="函数表达式" scheme="https://kujohnln.com/tags/%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="自执行函数表达式" scheme="https://kujohnln.com/tags/%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Share music</title>
    <link href="https://kujohnln.com/2016/11/27/share-music/"/>
    <id>https://kujohnln.com/2016/11/27/share-music/</id>
    <published>2016-11-27T00:53:47.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=27185190&auto=0&height=66"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=1156724&auto=0&height=66"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=28875058&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;https://music.163.com/outchain/player?type
      
    
    </summary>
    
      <category term="Music" scheme="https://kujohnln.com/categories/Music/"/>
    
    
      <category term="music" scheme="https://kujohnln.com/tags/music/"/>
    
  </entry>
  
  <entry>
    <title>webstorm es6 环境配置</title>
    <link href="https://kujohnln.com/2016/09/30/setup-es6-in-webstorm/"/>
    <id>https://kujohnln.com/2016/09/30/setup-es6-in-webstorm/</id>
    <published>2016-09-30T11:33:09.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<p>工欲善其事必先利其器，当然代码编写环境也不例外；转战webstorm一段时间后，用的很顺手；以前用sublim text只能到chrome的控制台调试，也没有代码索引功能（或者你要去装很多插件，但是我发现插件多了每次打开都很慢，一些hint或者lint之类的运行起来编辑器界面卡卡的，反倒不如webstorm这种，虽然启动软件有点慢），所以还是觉得webstorm用起来不错就开始转投webstorm了；当然凡事各有利弊，看个人喜好吧。<a id="more"></a>不过webstorm对于我开发而言，效率得到提高，而且用起来感觉很方便(错误提示，自动补全，注释等等)，这便是我选择的理由了。最近开始看es6比较多，想来webstorm是可以设置es6语法支持的，恩，不会报错了，可是一运行会发现立马报错，看来这是指支持语法规则，而缺少es6的编译环境，这样webstorm的优势完全体现不出来了。想起了万能的互联网，于是搜索到了不少结果，看来也是很多网友遇到这个问题了，幸亏有前辈的肩膀可以站。但是貌似有点高兴太早了，可能电脑各种环境的不一致因素，并未一次成功，踩了几个坑之后，最后还是解决了。</p><h2 id="语法支持设置"><a href="#语法支持设置" class="headerlink" title="语法支持设置"></a>语法支持设置</h2><p>我用的webstorm11(其他版本不保证) 系统win10</p><blockquote><p>settings -&gt; Languages &amp; Frameworks -&gt; JavaScript</p></blockquote><p><img src="/images/upload/setup-es6-1.png" alt="配置"><br>配置好了之后<br><img src="/images/upload/setup-es6-2.png" alt="测试"><br>好了这样就支持es6语法了，但是你会发现并不能进行debug，编译，运行，很郁闷。这时候就要用到es6的编译器babel了</p><h2 id="babel配置"><a href="#babel配置" class="headerlink" title="babel配置"></a>babel配置</h2><p><a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a>是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在浏览器或其他环境执行。这样你就可以用ES6的方式编写程序，又不用担心现有环境是否支持。<br><strong>安装babel</strong></p><pre><code>npm install babel-cli</code></pre><p><strong>添加babel-preset-es2015模块</strong></p><pre><code>npm install babel-preset-es2015</code></pre><p>项目下必须添加<code>babel-preset-es2015</code>模块，不然会报错，然后再添加一个<code>.babelrc</code>的配置文件并加上 {“presets”:[“es2015”]}，这句表示启动时预设es2015转码</p><h2 id="设置file-watcher"><a href="#设置file-watcher" class="headerlink" title="设置file watcher"></a>设置file watcher</h2><p>如果你希望每次改动源文件时进行自动转码，就需要设置file watcher了</p><blockquote><p>settings -&gt; tools -&gt; file watchers</p></blockquote><p>然后点击加号添加<br><img src="/images/upload/setup-es6-3.png" alt="配置file watcher"><br>配置好了之后你就会发现会随时编译成ES5的文件以及sourceMap文件<br><img src="/images/upload/setup-es6-4.png" alt="转码成ES5"><br>这样就大功告成，可以再webstorm下愉快的使用ES6了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工欲善其事必先利其器，当然代码编写环境也不例外；转战webstorm一段时间后，用的很顺手；以前用sublim text只能到chrome的控制台调试，也没有代码索引功能（或者你要去装很多插件，但是我发现插件多了每次打开都很慢，一些hint或者lint之类的运行起来编辑器界面卡卡的，反倒不如webstorm这种，虽然启动软件有点慢），所以还是觉得webstorm用起来不错就开始转投webstorm了；当然凡事各有利弊，看个人喜好吧。
    
    </summary>
    
      <category term="Tools" scheme="https://kujohnln.com/categories/Tools/"/>
    
    
      <category term="webstorm" scheme="https://kujohnln.com/tags/webstorm/"/>
    
      <category term="es6" scheme="https://kujohnln.com/tags/es6/"/>
    
      <category term="环境配置" scheme="https://kujohnln.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu折腾记</title>
    <link href="https://kujohnln.com/2016/09/26/Install-ubuntu/"/>
    <id>https://kujohnln.com/2016/09/26/Install-ubuntu/</id>
    <published>2016-09-26T03:28:48.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<p>我先声明，我真的不是处女座，但是发现我有时候真的很强迫症，正好用命令行用得顺手，但总是很多命令被报错，装各种软件出问题，归根结底还是window对那些不太友好，心里还是想着用Linux试试看？虽然电脑里头虚拟机装着Ubuntu以及XOS，但是总归不方便，程序一多卡的要死，正好想起有个闲置的老笔记本，干脆就拿她专门做Linux机用；<a id="more"></a>自己比较习惯用Ubuntu，就装Ubuntu好了，考虑到机器的性能和配置比较低，我选择的是Ubuntu12.04LTS版本。</p><h3 id="制作U盘启动盘"><a href="#制作U盘启动盘" class="headerlink" title="制作U盘启动盘"></a>制作U盘启动盘</h3><p>准备工作：</p><ol><li>已格式化的U盘一个</li><li>Ubuntu的ISO文件</li><li>UltraISO软件</li></ol><p>开始制作：</p><ol><li>安装并打开UltraISO软件。</li><li>选择文件打开<img src="/images/upload/written_ISO_1.png" alt="文件选择" title="启动写入映像">加载下好的Ubuntu ISO文件<img src="/images/upload/written_ISO_2.png" alt="加载ISO文件" title="选择要加载ISO文件"></li><li>点击启动写入硬盘映像弹出写入对话框</li><li>配置项，选择要写入的U盘以及写入方式一般为<code>USB-HDD+</code>，然后点便捷启动，选择写入新的驱动器引导扇区，选择Syslinux，最后点击写入等待写入完成就OK了。<img src="/images/upload/written_ISO_4.png" alt="配置页面" title="配置页面"></li></ol><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>准备工作：</p><ol><li>一台待安装的电脑</li><li>Ubuntu的U盘启动盘</li></ol><p>开始安装：</p><ol><li>开机狂按F12进入BIOS进行设置(不同机器进入方式不一样，不过多解释)，设置启动方式，默认是硬盘启动，我们需要改为U盘启动。</li><li>设置完成之后插上U盘重启电脑，稍等片刻你就可以看到Ubuntu的启动界面了。</li><li>按照提示步骤安装就好(这步不会的网上自行搜索)。</li><li>等待20~30分钟安装完成即可。</li></ol><h3 id="网卡驱动问题"><a href="#网卡驱动问题" class="headerlink" title="网卡驱动问题"></a>网卡驱动问题</h3><p>总算安装完成了，由于手头并没有网线，就想着想直接用无线网，但是发现无线网的图标是暗着的。<img src="/images/upload/disable_network.png" alt="未启用的无线网" title="无线未启用">也不能开启自动搜寻；估摸着肯定是无线网卡的驱动没装好；那么要安装驱动肯定得先知道网卡的型号，需要检测硬件信息。<br>打开Terminal(命令行终端)输入：</p><pre class="line-numbers language-bash"><code class="language-bash">lspci <span class="token operator">|</span> <span class="token function">grep</span> network <span class="token comment" spellcheck="true"># lspci是显示所有PCI总线设备的命令</span><span class="token comment" spellcheck="true"># grep Network是匹配所有包含Network的信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/upload/get_network.png" alt="网卡信息" title="网卡信息"><br>当然如果你想查看更详细的信息，也没问题</p><pre class="line-numbers language-bash"><code class="language-bash">lshw -C network<span class="token comment" spellcheck="true"># lshw是显示硬件信息 network表示网卡相关信息 参数-C是表示详细信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/upload/hw_info_network.png" alt="详细网卡信息" title="详细网卡信息"><br>这样就得到网卡相关的信息了，我的是Broadcom(博通)的，型号是BCM4312；到Broadcom的官网找到对应驱动(<a href="http://www.broadcom.com/support/802.11" target="_blank" rel="noopener">这里</a>),我的是32位的系统就下载32位的(我下的是hybrid-v35-nodebug-pcoem-6_30_223_271.tar.gz)；下好之后用U盘转到Ubuntu系统的电脑里。</p><h3 id="网卡驱动安装"><a href="#网卡驱动安装" class="headerlink" title="网卡驱动安装"></a>网卡驱动安装</h3><p>根据官网的安装教程说明(<a href="http://www.broadcom.com/docs/linux_sta/README_6.30.223.271.txt" target="_blank" rel="noopener">传送门</a>)，来一步步来安装。<br>拿到驱动文件后，解压到你指定的文件下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> hybrid_wl<span class="token function">cd</span> hybrid_wl<span class="token function">tar</span> xzf <span class="token operator">&lt;</span>path<span class="token operator">></span>/hybrid-v35-nodebug-pcoem-portsrc.tar.gz <span class="token comment" spellcheck="true">#path为你驱动文件所在路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>使用make命令编译</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> clean   <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#清除前面编译生成的可执行文件，这句命令可选，一般新安装不用</span><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>载入模块</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> depmod<span class="token function">sudo</span> modprobe wl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为我是第一次安装，在文档中看到需要删除跟要安装驱动有冲突的模块并加黑名单：</p><blockquote><p>Fresh installation:<br>1: Remove any other drivers for the Broadcom wireless device.</p></blockquote><blockquote><p>There are several other drivers (besides this one) that can drive<br>Broadcom 802.11 chips. These include b43, brcmsmac, bcma and ssb. They will<br>conflict with this driver and need to be uninstalled before this driver<br>can be installed. Any previous revisions of the wl driver also need to<br>be removed.</p></blockquote><blockquote><p>Note: On some systems such as Ubuntu 9.10, the ssb module may load during<br>boot even though it is blacklisted (see note under Common Issues on how to<br>resolve this. Nevertheless, ssb still must be removed<br>(by hand or script) before wl is loaded. The wl driver will not function<br>properly if ssb the module is loaded.</p></blockquote><p>根据文档说明，需要先移除一些模块，具体操作继续往下看：</p><pre class="line-numbers language-bash"><code class="language-bash">lsmod  <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"brcmsmac\|b43\|ssb\|bcma\|wl"</span> <span class="token comment" spellcheck="true">#表示显示匹配右边这几个模块，有的下面就删除</span><span class="token comment" spellcheck="true"># If any of these are installed, remove them:</span>rmmod b43rmmod brcmsmacrmmod ssbrmmod bcmarmmod wl<span class="token comment" spellcheck="true"># 如权限不够都加上sudo</span><span class="token comment" spellcheck="true"># To blacklist these drivers and prevent them from loading in the future:</span><span class="token keyword">echo</span> <span class="token string">"blacklist ssb"</span> <span class="token operator">>></span> /etc/modprobe.d/blacklist.conf<span class="token keyword">echo</span> <span class="token string">"blacklist bcma"</span> <span class="token operator">>></span> /etc/modprobe.d/blacklist.conf<span class="token keyword">echo</span> <span class="token string">"blacklist b43"</span> <span class="token operator">>></span> /etc/modprobe.d/blacklist.conf<span class="token keyword">echo</span> <span class="token string">"blacklist brcmsmac"</span> <span class="token operator">>></span> /etc/modprobe.d/blacklist.conf<span class="token comment" spellcheck="true"># 如若上面出现权限不够，就算用sudo还是权限不够(我就碰到了)，就改为如下命令</span><span class="token function">sudo</span> sh -c <span class="token string">'echo "blacklist ssb" >> /etc/modprobe.d/blacklist.conf'</span><span class="token comment" spellcheck="true"># 这里出现权限不够是因为重定向符号 “>” 和 ">>" 也是 bash 的命令，</span><span class="token comment" spellcheck="true"># 使用sudo只让echo命令具有root权限，后面的">>"并没有root权限，</span><span class="token comment" spellcheck="true"># 所以bash拒绝写入目标文件，而使用"sh -c"命令可以让bash将一个字符串作为完整的命令行，</span><span class="token comment" spellcheck="true"># 从而sudo的权限就扩展到整条命令了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> modprobe lib80211 <span class="token comment" spellcheck="true"># If your using the cfg80211 version of the driver, then cfg80211 needs to be loaded:</span><span class="token function">sudo</span> modprobe cfg80211 <span class="token comment" spellcheck="true">#我的用的这个版本就装了，在前面显示那些驱动模块的时候可以看到</span><span class="token function">sudo</span> insmod wl.ko<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行完了，就发现无线网卡启动了并开始搜寻附近WiFi了。<br><img src="/images/upload/enable_network.png" alt="网卡启动了" title="启动成功"><br><strong>如果执行完了，什么也没发生，在文档里也有说明。</strong></p><blockquote><p><strong>If the wl driver loads but doesn’t seem to do anything:</strong><br>the ssb module may be the cause. Sometimes blacklisting ssb may not<br>be enough to prevent it from loading and it loads anyway. (This is mostly<br>seen on Ubuntu/Debian systems).</p></blockquote><blockquote><p>Check to see if ssb, bcma, wl or b43 is loaded:<br><code>`</code>bash<br>lsmod | grep “brcmsmac|ssb|wl|b43|bcma”</p></blockquote><h1 id="If-any-of-these-are-installed-remove-them"><a href="#If-any-of-these-are-installed-remove-them" class="headerlink" title="If any of these are installed, remove them:"></a>If any of these are installed, remove them:</h1><p>rmmod brcmsmac<br>rmmod ssb<br>rmmod bcma<br>rmmod wl<br>insmod wl</p><h1 id="Back-up-the-current-boot-ramfs-and-generate-a-new-one"><a href="#Back-up-the-current-boot-ramfs-and-generate-a-new-one" class="headerlink" title="Back up the current boot ramfs and generate a new one:"></a>Back up the current boot ramfs and generate a new one:</h1><p>cp /boot/initrd.img-<code>uname -r</code> somewheresafe<br>update-initramfs -u<br>reboot</p><pre><code>#### 设为开机自启动这一步非常重要，我当时装完了，可以上网，然后一高兴以为可以了，就直接关机睡觉了(太晚了)，第二天一开机，我去，居然又不行了，一看文档原来是没有设为开机自启动，然后又按照上面的配置安装步骤来一遍就好了；然后设置到开机自启动：```bash# 注意要先转到前面驱动解压的hybrid_wl文件目录cp wl.ko /lib/modules/`uname -r`/kernel/drivers/net/wireless depmod -aecho modeprobe wl &gt;&gt; /etc/rc.local#这里出现权限不够错误时加上sudo sh -c</code></pre><p>到这里重启电脑，发现无线网卡驱动正确的，ok！perfect！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我先声明，我真的不是处女座，但是发现我有时候真的很强迫症，正好用命令行用得顺手，但总是很多命令被报错，装各种软件出问题，归根结底还是window对那些不太友好，心里还是想着用Linux试试看？虽然电脑里头虚拟机装着Ubuntu以及XOS，但是总归不方便，程序一多卡的要死，正好想起有个闲置的老笔记本，干脆就拿她专门做Linux机用；
    
    </summary>
    
      <category term="Linux" scheme="https://kujohnln.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://kujohnln.com/tags/Linux/"/>
    
      <category term="ubuntu" scheme="https://kujohnln.com/tags/ubuntu/"/>
    
      <category term="操作系统" scheme="https://kujohnln.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="网卡驱动" scheme="https://kujohnln.com/tags/%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>洗牌算法问题</title>
    <link href="https://kujohnln.com/2016/09/23/shuffle/"/>
    <id>https://kujohnln.com/2016/09/23/shuffle/</id>
    <published>2016-09-23T16:03:20.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>昨天碰到一道洗牌算法的试题，题目大概就是<strong>有一副54张牌的有序扑克，写一个洗牌算法</strong>；由于时间匆忙，没有过多的思考直接用最简单的方法写了，写到一半发现还有很多可以优化的地方，但是由于是笔试，不好修改就算了，打算回去再把这道题优化一下，顺便看下还有没算法或者去网上参考别人的算法，最后做一个时间性能比较。<br><a id="more"></a></p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>看到这个题，当时想的就是很直接简单的方法，就是每次从牌组里随机抽取一张牌，如抽到空牌则再抽，放到一个新的牌组里，直到所有的牌都抽到新牌组就达到洗牌的效果，这种做法一共是n!种排法，每张牌在这n!种排法中概率都是一样的为1/n!;这样洗牌的随机性可以保证了；由于n-1个数都有可能随机到已抽取的，所以每张牌需要随机次数的平均值为O(n),则时间复杂度为O(n^2)。看下代码实现(以js为例)#<code>shuffle.js</code>:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> shuffle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>cardsArr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>cardsArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> tempArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>cardsArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录已抽取的位置,1表示已抽取</span>  <span class="token keyword">var</span> position <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>cardsArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tempArr<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//直到抽取的随机数不为已抽取过的位置</span>      position <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>cardsArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cardsArr<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>    tempArr<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已抽取位置置1</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试</span><span class="token comment" spellcheck="true">//注意这里如果直接遍历赋值当算法里面改动了cards的值时，无法进行循环多次测量(这里我打算测试10000次)，下面同理</span><span class="token keyword">var</span> cards <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">54</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"test time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token function">cards</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"test time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为测试10000次，耗时基本落在420ms-440ms之间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种写法会发现有两个不太合理的地方，一个是除了用来存新生成牌序的数组，还多申请了一个用来记录已抽过位置的数组内存，另一个是越抽到后面，空牌几率越大，需要重新生成随机数的次数就越多，特别是当牌组数量很大时，耗费很多系统时间。那如果把空牌剔除就没有这个问题，下面代码测试一下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> shuffle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>cardsArr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>cardsArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> position <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>cardsArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cardsArr<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>    cardsArr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除空牌</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">var</span> cards <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">54</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"test time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token function">cards</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"test time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为测试10000次，耗时基本落在400ms-420ms之间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法不需要多申请一个状态数组，耗时也减少了，但对比第一种方法优化效果貌似不明显，主要在剔除空牌的时候，删除空牌后面的牌都需要相应进行前移，如果数组较大的话，是个很耗时的操作，因为数组移位的操作平均次数为n/2，时间复杂度仍为O(n^2),所以这个办法也不是很好。所以得想一个不需要整体前移的办法，可以把最后一张牌放置到要删除那张牌的位置上，这样不用删除直接覆盖掉，然后也不需要整体前移，只需要下次随机的时候不随到最后一张牌(虽然前移了，但该位置原值仍存在)，这样时间复杂度直接将为O(n)了，好的看下代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> shuffle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>cardsArr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> length <span class="token operator">=</span> cardsArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> length<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> position <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cardsArr<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>    cardsArr<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> cardsArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">var</span> cards <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">54</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"test time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token function">cards</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"test time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为测试10000次，耗时基本稳定在230ms左右</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然除了这种办法，在网上比较多的还是进行牌交换，达到牌间位置混淆的结果,这是一个叫Inside-Out Algorithm 算法，其基本思想是设一游标i从前向后扫描原始数据的拷贝，在[0, i]之间随机一个下标j，然后用位置j的元素替换掉位置i的数字，再用原始数据位置i的元素替换掉拷贝数据位置j的元素，其作用相当于在拷贝数据中交换i与j位置处的值;其时间复杂度为O(n),下面用js写一下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> shuffle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>cardsArr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span>cardsArr<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> temp <span class="token operator">=</span> cardsArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    cardsArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cardsArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    cardsArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> cardsArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">var</span> cards <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">54</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"test time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token function">cards</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"test time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为测试10000次，耗时基本在210-230ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过以上算法分析，第一种方法优化后的和牌交换的算法比较好，它们的区别就是前者原始数据被打乱，如果遇到需要保留原数组的情况，就需要用一个数组来保存原始数据；通过网上的一些资料，才知道第一种方法的优化其实就是一个叫Knuth-Durstenfeld Shuffle的洗牌算法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;p&gt;昨天碰到一道洗牌算法的试题，题目大概就是&lt;strong&gt;有一副54张牌的有序扑克，写一个洗牌算法&lt;/strong&gt;；由于时间匆忙，没有过多的思考直接用最简单的方法写了，写到一半发现还有很多可以优化的地方，但是由于是笔试，不好修改就算了，打算回去再把这道题优化一下，顺便看下还有没算法或者去网上参考别人的算法，最后做一个时间性能比较。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://kujohnln.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://kujohnln.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="shuffle" scheme="https://kujohnln.com/tags/shuffle/"/>
    
      <category term="javascript" scheme="https://kujohnln.com/tags/javascript/"/>
    
      <category term="算法优化" scheme="https://kujohnln.com/tags/%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96/"/>
    
      <category term="洗牌" scheme="https://kujohnln.com/tags/%E6%B4%97%E7%89%8C/"/>
    
  </entry>
  
  <entry>
    <title>BOM的一些知识点</title>
    <link href="https://kujohnln.com/2016/04/28/BOM/"/>
    <id>https://kujohnln.com/2016/04/28/BOM/</id>
    <published>2016-04-28T23:06:00.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h1><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><ul><li>BOM的核心是window，它表示浏览器的一个实例。window 对象既是通过 js 访问浏览器窗口的一个接口，又是 es 规定的Global 对象。<a id="more"></a></li><li>全局变量不能通过 delete 操作符删除，但是 window 对象上的属性是可以的。</li><li>直接访问为未声明的变量会报错，但是可以通过 window对象上的属性来查询某个未声明的变量是否存在。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> newValue <span class="token operator">=</span> oldValue  <span class="token comment" spellcheck="true">//会抛出错误，因为后者未声明</span><span class="token keyword">var</span> newValue <span class="token operator">=</span> window<span class="token punctuation">.</span>oldValue  <span class="token comment" spellcheck="true">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="间歇调用和超时调用"><a href="#间歇调用和超时调用" class="headerlink" title="间歇调用和超时调用"></a>间歇调用和超时调用</h2><ul><li>JS 是单线程语言，但它允许通过设置超时值和间歇时间值来调度代码在特定的时刻执行。前者是在指定的时间过后执行代码，后者则是每隔指定的时间就执行一次。</li><li><code>setTimeout()</code>方法可以接受两个参数，第一个是要执行的代码，也可以是字符串，但是推荐用<code>function(){}</code>。后一个参数是执行前需要等待的毫秒数。传递字符串可能导致性能损失，因此不建议。</li><li>值得注意的是，经过了指定的毫秒，代码也不一定会执行。js 是一个单线程序的解释器，有一个任务队列。如果队列是空的，那么代码会立即执行；如果队列不是空的，那么它就要等前面的代码执行完毕以后再执行。</li><li>取消的时候可以用<code>clearTime()</code>方法.把相应的数字 id 传递进去。</li><li>注意在以上方法中this 指向全局，window 对象。严格模式下是 undefined。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// timeoutId 是一个数字 ID</span><span class="token keyword">var</span> timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'heiheihei'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//即立即取消这个超时调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>取消间隔调用<code>setInterval()</code>远比取消<code>setTimeout()</code>重要的多，因为间隔调用如果不干涉会一直执行。</li><li>一般认为，使用setTimeout 模拟 setInterval 是最佳实践。因为后一个间歇调用可能会在前一个间歇调用结束前启动。使用模拟方式则可以避免这一情况。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">function</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//模拟setInterval 方法，间隔增加直至最大值</span>    num<span class="token operator">++</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>inc<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>inc<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><ul><li>location 是最有用的 BOM 对象之一，而且它既是 window 对象的属性，也是 document 对象的属性。 <code>window.location</code>和<code>document.location</code>引用的是同一个对象。</li><li>location 对象的用处不止表现在它保存着当前文档的信息，而且还可以通过不同属性访问 URL 的解析片段。</li></ul><table><thead><tr><th>属性名</th><th style="text-align:center">例子</th><th>说明</th></tr></thead><tbody><tr><td>hash</td><td style="text-align:center">‘#contents’</td><td>URL 中的 hash，#后面的字符，没有则为空</td></tr><tr><td>host</td><td style="text-align:center">‘<a href="http://www.baidu.com:80&#39;" target="_blank" rel="noopener">www.baidu.com:80&#39;</a></td><td>服务器名称和端口号(如果有)</td></tr><tr><td>hostname</td><td style="text-align:center">‘<a href="http://www.baidu.com&#39;" target="_blank" rel="noopener">www.baidu.com&#39;</a></td><td>服务器名称</td></tr><tr><td>href</td><td style="text-align:center">‘<a href="http://www.baidu.com:80/dd.html#hash1?q=name&#39;" target="_blank" rel="noopener">www.baidu.com:80/dd.html#hash1?q=name&#39;</a></td><td>完整URL</td></tr><tr><td>pathname</td><td style="text-align:center">‘/dd.html’</td><td>URL 中的目录和文件名</td></tr><tr><td>port</td><td style="text-align:center">‘80’</td><td>端口</td></tr><tr><td>protocol</td><td style="text-align:center">‘http:’</td><td>协议名和冒号</td></tr><tr><td>search</td><td style="text-align:center">‘?q=name’</td><td>查询字符串，别忘了有问号开头</td></tr></tbody></table><ul><li>尽管 <code>location.search</code> 可以查询到查询的字符串，但是没法逐个访问，并不方便。创建一个函数返回对象，得到对应的 key 和 value。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token keyword">function</span> <span class="token function">getQueryStringArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//字符串是否为空</span>    <span class="token keyword">var</span> qs <span class="token operator">=</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> items <span class="token operator">=</span> qs<span class="token punctuation">.</span>length <span class="token operator">?</span> qs<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> item <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      item <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//进行解码</span>      name <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      value <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        args<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> args  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位置操作location"><a href="#位置操作location" class="headerlink" title="位置操作location"></a>位置操作location</h3><pre class="line-numbers language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//修改 URL</span>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">'xxx'</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'xxx'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上述的三种方式得到的效果完全一样，因为后面的两个也会调用assign()方法。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//将 URL 修改成'http://www.baidu.com#section1' 页面不跳转</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">'#section1'</span><span class="token comment" spellcheck="true">//将 url 修改成'http://www.baidu.com:80' 页面跳转</span>location<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>每次修改 location 的属性(hash 除外)，页面都会以新 URL 重新加载。</li><li>当通过上述任何一种方式修改 URL 后，浏览器的历史记录就会生成一条新纪录。通过后退按钮都会回到前一个页面。</li><li>使用 replace()方法可以禁用后退按钮。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//浏览器跳转到百度，但不会在历史纪录中生成新纪录，而且不能回到之前的页面</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>location.reload()</code>方法会让浏览器以最有效的方式重新加载，可能使用缓存。</li><li><code>location.reload(true)</code>方法会让浏览器强制完全重载。</li><li>reload()方法之后的代码<strong>可能，也可能不会执行</strong>，所以放在最后一行吧。</li></ul><p>##history 对象</p><pre class="line-numbers language-javascript"><code class="language-javascript">history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//后退一页</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//前进一页</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//前进2页</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token string">'www.baidu.com'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//跳转到最近的百度页面，如果没有这条字符串，那么什么也不做</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>history<span class="token punctuation">.</span><span class="token function">forwward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//前进后退的简写方法</span>history<span class="token punctuation">.</span>length  <span class="token comment" spellcheck="true">//数量，新加载的页面是0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;BOM对象&quot;&gt;&lt;a href=&quot;#BOM对象&quot; class=&quot;headerlink&quot; title=&quot;BOM对象&quot;&gt;&lt;/a&gt;BOM对象&lt;/h1&gt;&lt;h2 id=&quot;window对象&quot;&gt;&lt;a href=&quot;#window对象&quot; class=&quot;headerlink&quot; title=&quot;window对象&quot;&gt;&lt;/a&gt;window对象&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;BOM的核心是window，它表示浏览器的一个实例。window 对象既是通过 js 访问浏览器窗口的一个接口，又是 es 规定的Global 对象。
    
    </summary>
    
      <category term="Javascript" scheme="https://kujohnln.com/categories/Javascript/"/>
    
    
      <category term="BOM" scheme="https://kujohnln.com/tags/BOM/"/>
    
      <category term="浏览器对象" scheme="https://kujohnln.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Css书写规范</title>
    <link href="https://kujohnln.com/2016/03/28/css-rule/"/>
    <id>https://kujohnln.com/2016/03/28/css-rule/</id>
    <published>2016-03-28T20:15:24.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<p>话说无规矩不成方圆，不管出于可读性，高效性，整洁性，规范css书写也是很有必要的；于是参考了网上的一些css书写规范，自己总结了下css书写规范，希望对自己以后以及前端的童鞋会有帮助。<br><a id="more"></a></p><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><h4 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h4><ul><li>使用下划线</li><li>例如：main_sprites.css<h4 id="常见文件命名"><a href="#常见文件命名" class="headerlink" title="常见文件命名"></a>常见文件命名</h4></li><li>主要的 main.css</li><li>模块 module.css</li><li>基本共用 base.css</li><li>布局、版面 layout.css</li><li>主题 themes.css<h4 id="选择器命名"><a href="#选择器命名" class="headerlink" title="选择器命名"></a>选择器命名</h4></li><li>连接词使用短横线”-“命名</li><li>尽量使用英文，不要拼音</li><li>在无歧义的前提下尽量使用缩写</li><li>全部小写<h4 id="常见命名"><a href="#常见命名" class="headerlink" title="常见命名"></a>常见命名</h4></li><li>头：header</li><li>内容：content/container</li><li>页脚：footer</li><li>导航：nav</li><li>侧栏：sidebar</li><li>栏目：column</li><li>页面外围控制整体佈局宽度：wrapper</li><li>左右中：left right center</li><li>登录条：loginbar</li><li>标志：logo</li><li>广告：banner</li><li>页面主体：main</li><li>热点：hot</li><li>新闻：news</li><li>下载：download</li><li>子导航：subnav</li><li>菜单：menu</li><li>子菜单：submenu</li><li>搜索：search</li><li>友情链接：friendlink</li><li>版权：copyright</li><li>滚动：scroll</li><li>内容：content</li><li>标签：tags</li><li>文章列表：list</li><li>提示信息：msg</li><li>小技巧：tips</li><li>标题：title</li><li>加入：joinus</li><li>指南：guide</li><li>服务：service</li><li>注册：regsiter</li><li>状态：status</li><li>投票：vote</li><li>合作伙伴：partner<h3 id="属性声明顺序"><a href="#属性声明顺序" class="headerlink" title="属性声明顺序"></a>属性声明顺序</h3></li></ul><ol><li>位置(position, top, right, z-index, display, float等)</li><li>大小(width, height, padding, margin)</li><li>文本样式(font-family, font-size, line-height, letter-spacing, color, text-align等)</li><li>背景(background, border等)</li><li>其他(animation, transition等)</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>love hate 原则（link visited hover active）</li><li>缩进2个空格大小（兼容linux操作系统2空格大小tab键）</li><li>注释采用”/<em> 注释 </em>/“, 不使用”//“</li><li>尽量少用id，使用class，因为class可复用</li><li>省略小数点前的0</li><li>尽量使用合并属性</li><li>颜色值使用16进制小写，能缩写就缩写</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话说无规矩不成方圆，不管出于可读性，高效性，整洁性，规范css书写也是很有必要的；于是参考了网上的一些css书写规范，自己总结了下css书写规范，希望对自己以后以及前端的童鞋会有帮助。&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://kujohnln.com/categories/CSS/"/>
    
    
      <category term="css" scheme="https://kujohnln.com/tags/css/"/>
    
      <category term="rule" scheme="https://kujohnln.com/tags/rule/"/>
    
      <category term="css规范" scheme="https://kujohnln.com/tags/css%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>ajax和跨域相关总结</title>
    <link href="https://kujohnln.com/2016/03/22/ajax/"/>
    <id>https://kujohnln.com/2016/03/22/ajax/</id>
    <published>2016-03-22T22:52:06.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<p>关于ajax和跨域的一些笔记。<br><a id="more"></a></p><h2 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h2><ul><li>open():接受三个参数，发送请求名，url和是否异步请求的布尔值。</li><li>readystatechange 事件监听，DOM级方法，因为并非所有浏览器都支持 DOM2级方法。</li><li>abort()方法可以取消异步请求，终止请求之后，还应该对 xhr 进行解引用操作，由于内存原因，不建议重用 xhr 对象。</li></ul><table><thead><tr><th>xhr.readyState状态码</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>尚未初始化，还没有调用 open 方法</td></tr><tr><td>1</td><td>open()方法已调用，还未发送 send()方法</td></tr><tr><td>2</td><td>send()方法已调用，尚未接受响应</td></tr><tr><td>3</td><td>已经开始接受部分响应，但没有完全接收</td></tr><tr><td>4</td><td>响应已经接受完成</td></tr></tbody></table><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTTP-头部信息"><a href="#HTTP-头部信息" class="headerlink" title="HTTP 头部信息"></a>HTTP 头部信息</h3><ul><li>使用 setRequestHeader()可以设置自定义的请求头部信息。接收两个参数，头部字段的名称和头部字段值。<strong>必须在 open 方法后，send 方法前进行设置。</strong></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'myHeader'</span><span class="token punctuation">,</span> <span class="token string">'myValue'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//open 和 send 中间设置</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>调用 getResponseHeader()方法可以取得头部信息，接受一个包含头部字段名。</li><li>调用 getAllResponseHeaders()可以取得所有头部信息。是一个格式化过的长字符串。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> header <span class="token operator">=</span> xhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'myHeader'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'myValue'</span><span class="token keyword">var</span> allHeaders <span class="token operator">=</span> xhr<span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回一个长字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><ul><li>使用 get 请求通常会发生一个错误，就是查询字符串的格式有问题，一定要使用 encodeURIConponent()进行转码后在放到 url 末尾。</li><li>键值对以&amp;分隔，url 跟？再接参数字符串。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//添加参数的方法，向现有 url 末尾添加参数</span>    url <span class="token operator">+</span><span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'?'</span> <span class="token punctuation">:</span> <span class="token string">'&amp;'</span>    url <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> <span class="token function">encodeURLIIComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">return</span> url<span class="token punctuation">}</span>url <span class="token operator">=</span> <span class="token function">addUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'www'</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><ul><li>默认情况下，服务器对 POST 请求不会和表单请求一视同仁，所以我们用 xhr 模仿表单提交，首先将头部 Content-type 信息设置为 application/x-www-form-urlencoded，也就是表单提交时的内容类型，然后以适当格式创建一个字符串。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">submitData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//设置头部信息</span>    <span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user-info'</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//序列化表单数据的一个自定义方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="XMLHTTPRequest2级"><a href="#XMLHTTPRequest2级" class="headerlink" title="XMLHTTPRequest2级"></a>XMLHTTPRequest2级</h2><h3 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h3><ul><li>FormData 类型，为序列化表单以及创建与表单格式相同的数据提供便利。</li><li>FormData类型有 append 方法，接受键值对这两个参数。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'Nicholas'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// FormData.append()方法</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//也可以直接传入一个表单元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建 FormData 实例后，可以传给 send 方法</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"> xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user-info'</span><span class="token punctuation">)</span> xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h2><h3 id="load-事件"><a href="#load-事件" class="headerlink" title="load 事件"></a>load 事件</h3><ul><li>兼容性 IE8+。</li><li>只要浏览器接受响应，不管状态如何，都会触发 load 事件。所以还是得判断 status 状态码确定数据是否真的可用。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//实际只是少了 readyState判断，相比之下</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="progress-事件"><a href="#progress-事件" class="headerlink" title="progress 事件"></a>progress 事件</h3><ul><li>xhr.onprogress()事件会接收一个 event 对象，target 属性指向 xhr 对象，有三个额外的属性。</li></ul><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>event.lengthComputable</td><td>进度信息是否可用的布尔值</td></tr><tr><td>event.position</td><td>表示已经接收的字节数</td></tr><tr><td>event.totalSize</td><td>表示根据 Content-Length 响应头部确定的预期字节数</td></tr></tbody></table><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//进度事件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> divProgress <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementbyId</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>        divProgress<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> e<span class="token punctuation">.</span>position <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>totalSize    <span class="token punctuation">}</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//记得 progress 事件要在 open 之前调用，和 onload 一样</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同源政策规避及跨域资源共享"><a href="#同源政策规避及跨域资源共享" class="headerlink" title="同源政策规避及跨域资源共享"></a>同源政策规避及跨域资源共享</h2><h3 id="同源政策"><a href="#同源政策" class="headerlink" title="同源政策"></a>同源政策</h3><p>同源指三个方面：协议，端口，域名。三者全部相同才是同源。同源政策是安全基石，如果 Cookie 包含隐私，或者登录状态，假设 A 网站是银行， B 网站可以直接读取用户的 Cookie，那么用户隐私会被泄露，冒充登录等。<strong>因为浏览器规定，表单提交不受同源政策限制。</strong></p><p>目前有三种行为受同源政策限制。</p><ol><li>Cookie、LocalStorage 和 IndexDB 无法读取。</li><li>DOM 无法获得。</li><li>AJAX 请求无法发送。</li></ol><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie 是服务器写入浏览器的一小段信息，只有同源网页才可以共享。但是如果两个网页一级域名相同，只有二级域名不同，浏览器允许通过设置 document.domain 共享 Cookie。</p><p><strong>需要注意的是，这种方法只适用 Cookie 和 iframe.</strong> LocalStorage 和 IndexDB 需要使用下面的 PostMessage API.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//假设 A 网页是 http://w1.baidu.com/a.html,B网页是 http://w2.baidu.com/b.html</span><span class="token comment" spellcheck="true">//在 两个 网页下都设置</span>document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">'baidu.com'</span><span class="token comment" spellcheck="true">//在 A 网页下</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'test1=hello'</span><span class="token comment" spellcheck="true">//在 B 网页下就可以读到这个 cookie</span><span class="token keyword">var</span> cook <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//另外服务器端可以在设置 cookie 时指定 cookie 所属域名为一级域名，比如.baidu.com,这样二级域名三级域名都不需要任何设置就可以读取 cookie。</span>Set<span class="token operator">-</span>Cookie<span class="token punctuation">:</span> key<span class="token operator">=</span>value<span class="token punctuation">;</span> domain<span class="token operator">=</span><span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">;</span>path<span class="token operator">=</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>如果两个窗口，比如 iframe 或者 window.open() 打开的窗口，一级域名相同，只是二级不同，可以设置 domain 规避同源政策拿到 DOM。<br>完全不同源的网站，目前有三种给你方法解决跨域窗口通信问题。</p><ol><li>片段识别符( fragment identifier)</li><li>window.name</li><li>跨文档通信 API (Cross-document messaging)</li></ol><h4 id="片段识别符"><a href="#片段识别符" class="headerlink" title="片段识别符"></a>片段识别符</h4><p>片段识别符就是 url 后面的#后面的部分。如果只是改变锚点，页面不会刷新。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//父窗口写入子窗口</span><span class="token keyword">var</span> src <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">'#'</span> <span class="token operator">+</span> datadocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myIframe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token comment" spellcheck="true">//子窗口监听锚点改变</span>window<span class="token punctuation">.</span>onhashchange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> message <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//子窗口写入父窗口</span>parent<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> target <span class="token operator">+</span> <span class="token string">'#'</span> <span class="token operator">+</span> hash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h4><p>浏览器有一个 window.name 属性，只要在一个标签内打开的网页是可以读取这个属性值的。<br>这个属性可以存很长容量的字符串，缺点是父窗口要监听 window.name 属性，影响页面性能。<br>使用方法：</p><ol><li>父窗口内打开非同源子窗口</li><li>子窗口设置 window.name 属性</li><li>子窗口跳转到同域的网址</li><li>因为已经同源，父窗口现在可以读取子窗口 window.name 属性了</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>name <span class="token operator">=</span> data  <span class="token comment" spellcheck="true">//第二步 子窗口写入数据</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://parent.baidu.com/xxxx.html'</span> <span class="token comment" spellcheck="true">//第三步跳转到同源网址</span><span class="token comment" spellcheck="true">//在父窗口下读取数据</span><span class="token keyword">var</span> data <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myIframe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="window-postMessage"><a href="#window-postMessage" class="headerlink" title="window.postMessage"></a>window.postMessage</h4><p>上述两种是破解方法，html5提供了原生的夸文档消息传递，简称 XDM。兼容性IE8+。<br>既稳妥又简单的实现跨文档通信，比如 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 向 内嵌的一个p2p.baidu.com 页面进行通信。<br>核心是 postMessage()方法，接受两个字符串参数，传递的参数字符串和接收消息的窗口源，如果设置为*代表任意窗口都可以接收。第二个参数非常重要，防止发送到不安全的地方。</p><p>message事件参数：</p><ol><li>e.data:传递的参数字符串(虽然不一定是字符串，但是最好还是用 JSON.stringify()方法转成字符串再传递)</li><li>e.origin:消息发到了哪个域</li><li>e.source: 发送消息的的window 对象的代理，并非真是 window对象，所以只使用 postMessage() 方法就好</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//子窗口向父窗口传递信息</span><span class="token keyword">var</span> iframeWindow <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myIframe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentWindowiframeWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> <span class="token string">'http:// www.baidu.com'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//父窗口消息监听 message</span>window<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>origin <span class="token operator">===</span> <span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//确保消息传递的是给自己的，过滤不属于本窗口的信息</span>        <span class="token function">processMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        e<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'received'</span><span class="token punctuation">,</span> <span class="token string">'http://p2p.baidu.com'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//给子窗口发送回执</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h4><p>这个通过 window.postMessage()方法，父子窗口可以相互读写自己的 localStorage.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//父窗口写入子窗口iframe的localStorage</span><span class="token comment" spellcheck="true">//父窗口发送信息</span><span class="token keyword">var</span> myIframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentWindow<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Jack'</span> <span class="token punctuation">}</span>myIframe<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'http://p2p.baidu.com'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//子窗口监听 message 事件获取信息写入 localStorage</span>myIframe<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>origin <span class="token operator">===</span> <span class="token string">'http://p2p.baidu.com'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>key<span class="token punctuation">,</span> data<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AJAX-请求规避同源限制"><a href="#AJAX-请求规避同源限制" class="headerlink" title="AJAX 请求规避同源限制"></a>AJAX 请求规避同源限制</h2><p>同源政策规定，ajax请求只能发给同源网址，否则就报错。<br>除了架设服务器代理（浏览器请求同源服务器，再由后者请求外部服务），有三种方法规避这个限制。</p><ol><li>JSONP</li><li>WebSocket</li><li>CORS</li></ol><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。<br>由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。</p><p>优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求。</p><p>JSONP：json+padding（内填充），顾名思义，就是把JSON填充到一个盒子里</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">createJs</span><span class="token punctuation">(</span>sUrl<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> oScript <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oScript<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/javascript'</span><span class="token punctuation">;</span>        oScript<span class="token punctuation">.</span>src <span class="token operator">=</span> sUrl<span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oScript<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">createJs</span><span class="token punctuation">(</span><span class="token string">'jsonp.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'test'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h3><p>WebSocket是Web应用程序的传输协议，它提供了双向的，按序到达的数据流。他是一个HTML5协议，WebSocket的连接是持久的，他通过在客户端和服务器之间保持双工连接，服务器的更新可以被及时推送给客户端，而不需要客户端以一定时间间隔去轮询</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>服务器端对于CORS的支持，主要就是通过设置Access-Control-Allow-Origin来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于ajax和跨域的一些笔记。&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://kujohnln.com/categories/Javascript/"/>
    
    
      <category term="ajax" scheme="https://kujohnln.com/tags/ajax/"/>
    
      <category term="跨域请求" scheme="https://kujohnln.com/tags/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>全宋词之东风何处是人间</title>
    <link href="https://kujohnln.com/2015/06/10/songci/"/>
    <id>https://kujohnln.com/2015/06/10/songci/</id>
    <published>2015-06-10T03:15:00.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;前几天在网上看到一篇文章，说的是一位叫<code>yixuan</code>的网友统计出了宋词词频，并且依据这些统计结果，网友纷纷在下面作词留言，反正聊得挺欢乐的，详情请戳<a href="http://yixuan.cos.name/cn/2011/03/text-mining-of-song-poems/" target="_blank" rel="noopener">这里</a>。顿时呢我也兴趣来了，也想用python(他是用的R语言)自己来实践一下，顺便做几首词出来装装逼。好的，那我们开始了！<br><a id="more"></a></p><h2 id="使用爬虫获取全宋词"><a href="#使用爬虫获取全宋词" class="headerlink" title="使用爬虫获取全宋词"></a>使用爬虫获取全宋词</h2><h3 id="使用工具scrapy"><a href="#使用工具scrapy" class="headerlink" title="使用工具scrapy"></a>使用工具scrapy</h3><p>最近刚好学了<code>scrapy</code>爬虫框架，正好拿来用用。了解更多关于scrapy的知识，可查看<a href="http://doc.scrapy.org/en/latest/intro/tutorial.html" target="_blank" rel="noopener">官方教程</a>；具体使用就不再详细说明了。</p><h3 id="分析网页结构"><a href="#分析网页结构" class="headerlink" title="分析网页结构"></a>分析网页结构</h3><p>好的，废话就不多说了；先找到提供全宋词的网站，<a href="http://www.gushiwen.org/gushi/quansong.aspx" target="_blank" rel="noopener">点击这里</a>。<br>然后在全宋词页面定位诗人，审查元素，如下图所示<img src="/images/upload/songci.png" alt="songci" title="songci"><br>可以发现，链接都有规律，就可以直接放到scrapy的starURL列表里。下面就直接代码感受一下了。</p><h3 id="开始编写代码"><a href="#开始编写代码" class="headerlink" title="开始编写代码"></a>开始编写代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># songciSpider.py</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>__author__ <span class="token operator">=</span> <span class="token string">'echolee'</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>selector <span class="token keyword">import</span> Selector<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spider <span class="token keyword">import</span> Spider<span class="token keyword">from</span> songci<span class="token punctuation">.</span>items <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">newsInfoSpider</span><span class="token punctuation">(</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"songci"</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"gushiwen.org"</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        url_template <span class="token operator">=</span> <span class="token string">'http://www.gushiwen.org/wen_%s.aspx'</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">2011</span><span class="token punctuation">,</span> <span class="token number">3363</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># page:2011-3362</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url_template <span class="token operator">%</span> i<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        sel <span class="token operator">=</span> Selector<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        all_ptag <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[@class='authorShow']/p"</span><span class="token punctuation">)</span>        author <span class="token operator">=</span> all_ptag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        all_pci <span class="token operator">=</span> all_ptag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'string(.)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        all_ci <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>all_pci<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">,</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> response<span class="token punctuation">.</span>url        item <span class="token operator">=</span> SongciItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span> <span class="token operator">=</span> author        item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> url        item<span class="token punctuation">[</span><span class="token string">'all_ci'</span><span class="token punctuation">]</span> <span class="token operator">=</span> all_ci        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># pipelines.py</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>__author__ <span class="token operator">=</span> <span class="token string">'echolee'</span><span class="token keyword">import</span> json<span class="token keyword">import</span> codecs<span class="token keyword">class</span> <span class="token class-name">SongciPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>file <span class="token operator">=</span> codecs<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'songci.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>        self<span class="token punctuation">.</span>file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">spider_closed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里不仅仅提取了诗文，还有作者标题等方便别的用途。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>打开<code>cmd</code> or <code>powershell</code>，进入scrapy project目录，执行命令</p><pre class="line-numbers language-bash"><code class="language-bash">scrapy crawl spiderName <span class="token comment" spellcheck="true"># 这里的spiderName是自己定义的</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后等待抓取完毕保存为json文件即可。</p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>&emsp;&emsp;这一节，我们会说到一些简单的文件操作，包括文件读取与写入；还有中文正则匹配，这个中文正则，在我的前一篇文章里有提到过的，<a href="/2015/06/08/Re/">传送门</a>;当然还涉及到json模块解析json数据；下面可以参考我的代码试试。</p><h3 id="读取json文件"><a href="#读取json文件" class="headerlink" title="读取json文件"></a>读取json文件</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 读取json文件，提取所有词文</span><span class="token keyword">def</span> <span class="token function">json2str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    file_path <span class="token operator">=</span> <span class="token string">'songci.json'</span>    fo <span class="token operator">=</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> fo<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    allci_line <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        jsonline <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>jsonline<span class="token punctuation">)</span>        ci <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'all_ci'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print ci</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="词句初步处理"><a href="#词句初步处理" class="headerlink" title="词句初步处理"></a>词句初步处理</h3><p>去标点并以<code>，。</code>为分割点把词分为一行一句式方便后续处理</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 因为有的词里面有标题以及括号里的副标题</span><span class="token comment" spellcheck="true"># 不同的的提取会影响最终结果，所以我这里就三种方式都有(唉，强迫症患者，没办法)</span><span class="token comment" spellcheck="true"># 你也可以不用理会，用一个就行了</span><span class="token keyword">def</span> <span class="token function">pick2line</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># flag</span>    <span class="token comment" spellcheck="true"># 0表示全取，1表示只取正词，2表示词+正标题</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        pick <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>u<span class="token string">"[\u4e00-\u9fa5]+"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        pick <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>u<span class="token string">"[\u4e00-\u9fa5]+(?=[\u3002|\uff0c|\u3001]{1})"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        pick <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>u<span class="token string">"[\u4e00-\u9fa5]+"</span><span class="token punctuation">)</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>u<span class="token string">'·'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        pickbetter <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>u<span class="token string">"[\uff08]{1}[\u4e00-\u9fa5]+[\uff09]{1}"</span><span class="token punctuation">)</span>        str <span class="token operator">=</span> pickbetter<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span>    line <span class="token operator">=</span> pick<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">return</span> line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="保存为txt文件"><a href="#保存为txt文件" class="headerlink" title="保存为txt文件"></a>保存为txt文件</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">write2txt</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'songcidata'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"songcidata"</span><span class="token punctuation">)</span>    filename <span class="token operator">=</span> <span class="token string">"songcidata/songci_line.txt"</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>lines<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全部的代码"><a href="#全部的代码" class="headerlink" title="全部的代码"></a>全部的代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>__author__ <span class="token operator">=</span> <span class="token string">'echolee'</span><span class="token keyword">import</span> json<span class="token punctuation">,</span> re<span class="token punctuation">,</span> os<span class="token punctuation">,</span> time<span class="token keyword">def</span> <span class="token function">pick2line</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># flag</span>    <span class="token comment" spellcheck="true"># 0表示全取，1表示只取正词，2表示包括正标题</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        pick <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>u<span class="token string">"[\u4e00-\u9fa5]+"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        pick <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>u<span class="token string">"[\u4e00-\u9fa5]+(?=[\u3002|\uff0c|\u3001]{1})"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        pick <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>u<span class="token string">"[\u4e00-\u9fa5]+"</span><span class="token punctuation">)</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>u<span class="token string">'·'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        pickbetter <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>u<span class="token string">"[\uff08]{1}[\u4e00-\u9fa5]+[\uff09]{1}"</span><span class="token punctuation">)</span>        str <span class="token operator">=</span> pickbetter<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span>    line <span class="token operator">=</span> pick<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">return</span> line<span class="token keyword">def</span> <span class="token function">json2str</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    file_path <span class="token operator">=</span> <span class="token string">'songci.json'</span>    fo <span class="token operator">=</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> fo<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    allci_line <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        jsonline <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>jsonline<span class="token punctuation">)</span>        ci <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'all_ci'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print ci</span>        ci_lines <span class="token operator">=</span> pick2line<span class="token punctuation">(</span>ci<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>        <span class="token keyword">for</span> ci_line <span class="token keyword">in</span> ci_lines<span class="token punctuation">:</span>            allci_line<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ci_line<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>allci_line<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write2txt</span><span class="token punctuation">(</span>lines<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'songcidata'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"songcidata"</span><span class="token punctuation">)</span>    filename <span class="token operator">=</span> <span class="token string">"songcidata/"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">".txt"</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>lines<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    namelist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'songci_haveall'</span><span class="token punctuation">,</span><span class="token string">'songci_notitle'</span><span class="token punctuation">,</span><span class="token string">'songci_havebettertitle'</span><span class="token punctuation">]</span>    t0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> flag <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        txt <span class="token operator">=</span> json2str<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print txt</span>        write2txt<span class="token punctuation">(</span>txt<span class="token punctuation">,</span>namelist<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'数据处理完成,用时%s s'</span> <span class="token operator">%</span><span class="token punctuation">(</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t0 <span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好的，经过上面的处理我们已经得到以句为分割的宋词行的txt文本了（我这里只取正文的话，总共有277950句）。</p><h2 id="分词与分析"><a href="#分词与分析" class="headerlink" title="分词与分析"></a>分词与分析</h2><p>&emsp;&emsp;终于，我们要开始正题了么，没错，希望你前面的代码都理解好了；其实很简单有没有;这一节你会发现宋词也挺有趣的；会了解到怎么使用sqlite数据库;还有基于统计的简单分词。</p><h3 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h3><p>&emsp;&emsp;中文分词一直以来都是一个比较有挑战性的问题，我只是做个简单的宋词词频统计而已，所以并不想过多的纠结于分词的问题上；因为宋词的句子一般都比较短，就偷懒直接上暴力的穷举法；简单来讲就是对一个句子进行所有可能的划分，再通过词频高低简单判断并丢弃低频词(词频越高越有可能是一个词，反之则丢弃)。<br>好的，下面就简单的用Python实现一下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 对每句进行穷举分词</span><span class="token keyword">def</span> <span class="token function">fenci</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> line<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>u<span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            key <span class="token operator">=</span> line<span class="token punctuation">[</span>i<span class="token punctuation">:</span>j<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token operator">not</span> key<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> key <span class="token keyword">in</span> fenci_dict<span class="token punctuation">:</span>                fenci_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                fenci_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># print '>>>'+key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用sqlite数据库"><a href="#使用sqlite数据库" class="headerlink" title="使用sqlite数据库"></a>使用sqlite数据库</h3><p>为了后面使用方便查询，这里使用sqlite数据库储存分词结果</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sava2db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 使用splite3数据库保存数据方便查询</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'songcidata/songci.db'</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建table如果不存在</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"create table if not exists songci(key text, value inteager)"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> key <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>fenci_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> fenci_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 去低频</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from songci where key=?'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'insert into songci values(?,?)'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> fenci_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'写入数据库成功...'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fenci-py全部的代码"><a href="#fenci-py全部的代码" class="headerlink" title="fenci.py全部的代码"></a>fenci.py全部的代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>__author__ <span class="token operator">=</span> <span class="token string">'echolee'</span><span class="token keyword">import</span> sqlite3<span class="token punctuation">,</span> time<span class="token keyword">def</span> <span class="token function">fenci</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> line<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>u<span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            key <span class="token operator">=</span> line<span class="token punctuation">[</span>i<span class="token punctuation">:</span>j<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token operator">not</span> key<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> key <span class="token keyword">in</span> fenci_dict<span class="token punctuation">:</span>                fenci_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                fenci_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true">#print '>>>'+key</span><span class="token keyword">def</span> <span class="token function">sava2db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 使用splite3数据库保存数据方便查询</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'songcidata/songci2.db'</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建table如果不存在</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"create table if not exists songci(key text, value inteage)"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> key <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>fenci_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> fenci_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 去低频，10次以下的词频说明不是词或者意义不大</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from songci where key=?'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'insert into songci values(?,?)'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> fenci_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'写入数据库成功...'</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filename <span class="token operator">=</span> <span class="token string">'songcidata/songci_line.txt'</span>    fo <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> fo<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> fenci_dict <span class="token comment" spellcheck="true"># 使用全局变量储存结果</span>    fenci_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        fenci<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># total = len(fenci_dict)</span>    <span class="token comment" spellcheck="true"># 排序输出前十</span>    <span class="token comment" spellcheck="true"># print '总分词结果为',total,'条\n前十条结果为：'</span>    <span class="token comment" spellcheck="true"># sorted_fenci = sorted(fenci_dict.iteritems(), key = lambda d: d[1], reverse = True)</span>    <span class="token comment" spellcheck="true"># for i in xrange(10):</span>        <span class="token comment" spellcheck="true"># print sorted_fenci[i][0],':', sorted_fenci[i][1]</span>    sava2db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'数据处理完成,用时%.2f s'</span> <span class="token operator">%</span><span class="token punctuation">(</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t0 <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出排序结果"><a href="#输出排序结果" class="headerlink" title="输出排序结果"></a>输出排序结果</h3><p>话也就不多说了，直接进入最激动人心的时刻吧，等一下，还是先看看代码了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>__author__ <span class="token operator">=</span> <span class="token string">'echolee'</span><span class="token keyword">import</span> sqlite3<span class="token keyword">def</span> <span class="token function">getDoubleSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'songcidata/songci.db'</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询所有两个字组合的词并排序</span>    sql <span class="token operator">=</span> <span class="token string">'select * from songci where length(key)=2 order by value desc'</span>    result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    rank <span class="token operator">=</span> <span class="token string">'000000'</span> <span class="token comment" spellcheck="true"># 这里纯属强迫症晚期，只是为了输出时对齐好看</span>    rank <span class="token operator">=</span> rank<span class="token punctuation">[</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 词频从高到低排序输出</span>    <span class="token keyword">print</span> <span class="token string">' Rank '</span><span class="token punctuation">,</span><span class="token string">' Word '</span><span class="token punctuation">,</span><span class="token string">' Freq'</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> rank<span class="token punctuation">[</span>len<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    getDoubleSort<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好的，该来的总是要来的，OK，我们运行看看结果：<br><img src="/images/upload/rank2.png" alt="rank" title="rank"><br>看到这个排名，是不是感到一股亲切感，没错；前三<code>东风</code>、<code>何处</code>、<code>人间</code>，这就是全宋词所隐藏的文字密码，哈哈，全宋词总结起来就是一句话：<code>东风何处是人间</code>（哈哈，装个逼，文科生们请手下留情）。</p><p>再来看看三个字的（查询字长改为3即可）：<br><img src="/images/upload/rank3.png" alt="rank" title="rank"><br>哈哈，3字词频最高的居然是<code>倚阑干</code>，为何这些诗人都爱<code>倚阑干</code>啊，正如马亲王说的：“千古忧愁，不过五个字：独自莫凭栏。”<br>正好在知乎看到过这个问题-<a href="http://www.zhihu.com/question/23858540" target="_blank" rel="noopener">古代诗词大家为何都爱倚栏杆（阑干）?</a>,下面有的回答挺好的。</p><p>对了，有了词频表，也可以自己作作词玩玩了，比如说，数字随机生成词，那就写个简单demo试试：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>__author__ <span class="token operator">=</span> <span class="token string">'echolee'</span><span class="token keyword">import</span> sqlite3<span class="token keyword">def</span> <span class="token function">num2songci</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    search <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        search<span class="token punctuation">.</span>append<span class="token punctuation">(</span>int<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'songcidata/songci.db'</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> search<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 每次以第(key-1)条记录为基准取一条记录，</span>        sql <span class="token operator">=</span> <span class="token string">'select * from songci where length(key)=2 order by value desc limit 1 offset '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>key<span class="token number">-1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如，来个根号二小数点后几位(<code>4142135623730950488016887242097</code>)<br>再稍微润色一下，即可得如下：</p><pre><code>如梦令·根号二平生凄凉（感叹凄凉的一生）回首何事（还能回想什么事呢）芳草海棠（不就是那些值得回忆的红颜知己）相思杨柳（还有那些甚是思念的友人）西湖无情（想起当年西湖断桥的白素贞和许仙，为什么那么无情呢）如今往事（现在想起以前的种种往事）一声凄凉（只能再叹一声凄凉）相思西风（还有那思念仍飘荡在这寒冷的西风中）</code></pre><p>还挺有趣的吧,那你也可以试一试的；其实的话这里做的比较简陋，比如平仄押韵什么的都没有，如果你有兴趣的话，还可以做得更好，and 欢迎在下面留言！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;前几天在网上看到一篇文章，说的是一位叫&lt;code&gt;yixuan&lt;/code&gt;的网友统计出了宋词词频，并且依据这些统计结果，网友纷纷在下面作词留言，反正聊得挺欢乐的，详情请戳&lt;a href=&quot;http://yixuan.cos.name/cn/2011/03/text-mining-of-song-poems/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;。顿时呢我也兴趣来了，也想用python(他是用的R语言)自己来实践一下，顺便做几首词出来装装逼。好的，那我们开始了！&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://kujohnln.com/categories/Python/"/>
    
    
      <category term="python" scheme="https://kujohnln.com/tags/python/"/>
    
      <category term="scrapy" scheme="https://kujohnln.com/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>遇到&#39;gbk&#39; codec can&#39;t encode character u&#39;\xa0&#39;及类似错误解决办法</title>
    <link href="https://kujohnln.com/2015/06/08/codecError/"/>
    <id>https://kujohnln.com/2015/06/08/codecError/</id>
    <published>2015-06-08T18:51:29.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;一般像这种错误我经常会在用爬虫爬东西的时候遇到，抓过来的数据可能会很乱，当终端输出时就很可能出现<code>&#39;gbk&#39; codec can&#39;t encode character u&#39;\xa0&#39;</code>及类似的编码错误。因为终端默认输出编码为gbk，而gbk里并没有<code>\xa0</code>这个字符，下面总结几种常用的解决办法：<br><a id="more"></a></p><p>##利用python的replace方法替换不规则数据</p><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> u<span class="token string">'\xa0'</span>u<span class="token string">'\u4e00'</span><span class="token keyword">print</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>u<span class="token string">'\xa0'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>##运用<code>encode</code>函数</p><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> u<span class="token string">'\xa0'</span>u<span class="token string">'\u4e00'</span><span class="token keyword">print</span> str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">,</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果你想采用Unicode编码，你可以这样</span>newStr <span class="token operator">=</span> str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">,</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其实你也可以用万能的正则表达式了，不过暂时感觉杀鸡焉用牛刀了，非要用的话也可以试试，这里就不详细说明了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;一般像这种错误我经常会在用爬虫爬东西的时候遇到，抓过来的数据可能会很乱，当终端输出时就很可能出现&lt;code&gt;&amp;#39;gbk&amp;#39; codec can&amp;#39;t encode character u&amp;#39;\xa0&amp;#39;&lt;/code&gt;及类似的编码错误。因为终端默认输出编码为gbk，而gbk里并没有&lt;code&gt;\xa0&lt;/code&gt;这个字符，下面总结几种常用的解决办法：&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://kujohnln.com/categories/Python/"/>
    
    
      <category term="python" scheme="https://kujohnln.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>中文正则匹配</title>
    <link href="https://kujohnln.com/2015/06/08/Re/"/>
    <id>https://kujohnln.com/2015/06/08/Re/</id>
    <published>2015-06-08T17:22:27.000Z</published>
    <updated>2018-03-16T11:45:34.333Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;今天刚好碰到中文正则的问题，就<code>Mark</code>一下了<code>=￣ω￣=</code></p><p>匹配中文标点符号：</p><pre class="line-numbers language-python"><code class="language-python"> str<span class="token operator">=</span><span class="token string">"[\u3002\uff1b\uff0c\uff1a\u201c\u201d\uff08\uff09\u3001\uff1f\u300a\u300b]"</span> <span class="token comment" spellcheck="true">#该表达式分别对应：[ 。 ；  ， ： “ ”（ ） 、 ？ 《 》]这些中文标点符号。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><a id="more"></a><p>匹配中文汉字：</p><pre class="line-numbers language-python"><code class="language-python"> chinese<span class="token operator">=</span><span class="token string">"[\u4e00-\u9fa5]"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#该表达式可以匹配任意汉字。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面还是举个栗子感受一下:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> restr <span class="token operator">=</span> u<span class="token string">'苏幕遮（怀旧） 碧云天，黄叶地。秋色连波，波上寒烟翠。山映斜阳天接水。芳草无情，更在斜阳外。'</span><span class="token comment" spellcheck="true"># 匹配所有汉字</span>pickall <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>u<span class="token string">"[\u4e00-\u9fa5]+"</span><span class="token punctuation">)</span>line <span class="token operator">=</span> pickall<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre><code>苏幕遮怀旧碧云天黄叶地秋色连波波上寒烟翠山映斜阳天接水芳草无情更在斜阳外</code></pre><p>下面再来个复杂点的栗子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> restr <span class="token operator">=</span> u<span class="token string">'苏幕遮（怀旧） 碧云天，黄叶地。秋色连波，波上寒烟翠。山映斜阳天接水，芳草无情，更在斜阳外。黯乡魂、追旅思 ，夜夜除非，好梦留人睡。明月楼高休独倚，酒入愁肠，化作相思泪。'</span><span class="token comment" spellcheck="true"># 匹配所有以句号结尾的汉字但不包含句号，这里用到了(?=...)表示的是之后的内容需要匹配表达式</span><span class="token comment" spellcheck="true"># 才能匹配成功，但是该内容不消耗字符串（即不包含）。注意python里的数量词默认是非贪婪模式的</span>pick <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>u<span class="token string">"[\u4e00-\u9fa5]+(?=[\u3002]{1})"</span><span class="token punctuation">)</span>line <span class="token operator">=</span> pick<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>黄叶地波上寒烟翠更在斜阳外追旅思好梦留人睡化作相思泪</code></pre><p>好的，容我先听首歌<code>~_~</code><br><em>4分钟过去了…</em></p><p>最后想了解更多有关正则表达式的知识，<a href="http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html" target="_blank" rel="noopener">传送门</a>，不谢，请叫我雷锋。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;今天刚好碰到中文正则的问题，就&lt;code&gt;Mark&lt;/code&gt;一下了&lt;code&gt;=￣ω￣=&lt;/code&gt;&lt;/p&gt;&lt;p&gt;匹配中文标点符号：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt; str=&amp;quot;[\u3002\uff1b\uff0c\uff1a\u201c\u201d\uff08\uff09\u3001\uff1f\u300a\u300b]&amp;quot;
 #该表达式分别对应：[ 。 ；  ， ： “ ”（ ） 、 ？ 《 》]这些中文标点符号。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Regx" scheme="https://kujohnln.com/categories/Regx/"/>
    
    
      <category term="正则匹配" scheme="https://kujohnln.com/tags/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
</feed>
